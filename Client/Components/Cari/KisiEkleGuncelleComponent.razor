
<EditForm Model="cariModel" OnValidSubmit="ValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (loadingCompleted == false)
    {
        <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
    }

    <div class="mt-5">

        <div class="form">

            <div class="form-group">

                <div class="row">
                    <div class="col-md-10">
                        <label>Kişi Adı</label>
                        <InputText @bind-Value="cariModel.Tamadi" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="form-group"><div class="row">
                    <div class="col-md-2">
                        <label>Cari Kodu</label>
                        <InputText @bind-Value="cariModel.Carikodu" class="form-control" placeholder="Cari Kodu" disabled />
                    </div>
                    <div class="col-md-8">
                        <label>Cari Adı</label>
                        <div class="row">
                            <div class="col">
                                <InputText @bind-Value="cariModel.Cariadi" class="form-control" placeholder="Cari Adı"/>
                            </div>
                            <div class="col">
                                <MudButton Variant="Variant.Filled" IconColor="Color.Secondary" StartIcon="@Icons.Material.Filled.FindInPage" OnClick="CariListesiAc" Size=Size.Medium>Bul</MudButton>
                                <MudButton Variant="Variant.Filled" IconColor="Color.Secondary" StartIcon="@Icons.Material.Filled.AddCard" OnClick="YeniCariEkle" Size=Size.Medium>Yeni Cari</MudButton>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-6">
                        <label>Bölüm</label>
                        <InputText @bind-Value="cariModel.Bolum" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label>Pozisyon</label>
                        <InputText @bind-Value="cariModel.Pozisyon" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-6">
                        <label>Cep Telefonu</label>
                        <InputText @bind-Value="cariModel.Ceptel" class="form-control" />
                    </div>
                    <div class="col-md-6">
                        <label>İş Telefonu</label>
                        <InputText @bind-Value="cariModel.Istel" class="form-control" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-10">
                        <label>E-Posta</label>
                        <InputText @bind-Value="cariModel.Mail" class="form-control" type="email" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-10">
                        <label>Açıklama</label>
                        <InputTextArea @bind-Value="cariModel.Aciklama" class="form-control"></InputTextArea>
                    </div>
                </div>
            </div>

        </div>
    </div>



    <div class="form-group">
        <MudButton Disabled="@_processing" OnClick="ValidSubmit" Variant="Variant.Filled" Color="Color.Primary">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Kaydediliyor...</MudText>
            }
            else
            {
                <MudText>Kaydet</MudText>
            }
        </MudButton>
        <CancelButtonComponent Caption="Vazgeç" OnClick="goBackCariList" />
    </div>

</EditForm>



@code
{
    [Parameter]
    public int? logref { get; set; }
    [Parameter]
    public int? modalForm { get; set; }

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    KisilerDto cariModel = new KisilerDto();

    private bool isUpdate = false;
    private bool loadingCompleted = false;
    private bool _processing = false;

    public async Task KartGetir()
    {
        try
        {
            if (!logref.HasValue)
                return;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            cariModel = await httpClient.GetServiceResponseAsync<KisilerDto>(UrlHelper.KisiGetir + "?logref=" + logref + "&firmaId=" + selectedFirmaDonem.firma_no.Value);

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public async Task Kaydet()
    {
        try
        {
            SubmitValidation();
        }
        catch (ClientException ex)
        {
            foreach (var item in ex.ErrorList)
            {
                Snackbar.Add(item, severity: Severity.Warning);
            }
            return;
        }
        catch (Exception)
        {
        }

        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            _processing = true;
            if (!isUpdate)
            {
                var reff = await httpClient.GetServiceResponseAsync<int>(UrlHelper.RefNoAl + "?tablename=kisiler&firmaId=" + selectedFirmaDonem.firma_no.Value);

                cariModel.Logref = reff;
                //cariModel.Cariref = CariKartRef;
                cariModel.Insuser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
                cariModel.Insdate = DateTime.Now;
            }
            else
            {
                cariModel.Upduser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
                cariModel.Upddate = DateTime.Now;
            }

            var request = new KisilerRequestDto();
            request.Kisiler = cariModel;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            if (isUpdate)
            {
                cariModel = await httpClient.PostGetServiceResponseAsync<KisilerDto, KisilerRequestDto>(UrlHelper.KisiGuncelle, request);
                Snackbar.Add("Kişi güncellendi", severity: Severity.Success);
            }
            else
            {
                cariModel = await httpClient.PostGetServiceResponseAsync<KisilerDto, KisilerRequestDto>(UrlHelper.KisiKaydet, request);
                Snackbar.Add("Kişi eklendi", severity: Severity.Success);
            }

            if (modalForm.HasValue)
                await ModalInstance.CloseAsync(ModalResult.Ok<KisilerDto>(cariModel));
            else
                await goBackCariList();
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Hata", ex.Message);
        }
        finally
        {
            _processing = false;
        }
    }

    public async Task ValidSubmit()
    {
        await Kaydet();
    }

    public async Task goBackCariList()
    {
        if (modalForm.HasValue)
            await ModalInstance.CloseAsync();
        else
            navigation.NavigateTo("/kisi_listef");
    }

    protected override Task OnParametersSetAsync()
    {
        if (logref.HasValue)
            isUpdate = true;

        return Task.CompletedTask;
    }

    protected override async Task OnInitializedAsync()
    {
        if (logref.HasValue)
            isUpdate = true;

        if (isUpdate)
        {
            await KartGetir();
        }
        loadingCompleted = true;
    }

    public void SubmitValidation()
    {
        var err = new List<string>();

        if (string.IsNullOrWhiteSpace(cariModel.Tamadi))
            err.Add("Kişi Adı boş geçilemez");

        if (string.IsNullOrWhiteSpace(cariModel.Pozisyon))
            err.Add("Pozisyon boş geçilemez");

        if (string.IsNullOrWhiteSpace(cariModel.Mail))
            err.Add("E-posta boş geçilemez");

        if (string.IsNullOrWhiteSpace(cariModel.Ceptel))
            err.Add("Cep Telefonu boş geçilemez");

        if (err.Count > 0)
        {
            var ex = new ClientException("Boş geçilemez alanlar");
            ex.ErrorList = err;

            throw ex;
        }
    }

    public async Task CariListesiAc()
    {
        var opt = new ModalOptions();
        
        var cariForm = modal.Show<Pages.Cari.Cari_Sec>("Cari Seç", opt);
        var result = await cariForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var cariSecim = (VCariKartDto)result.Data;
                cariModel.Cariadi = cariSecim.Adi;
                cariModel.Carikodu = cariSecim.Kodu;
                cariModel.Cariref = cariSecim.Logref;
            }

        }
    }

    public async Task YeniCariEkle()
    {
        var opt = new ModalOptions();
        
        var parameters = new ModalParameters();
        parameters.Add("modalForm", 1);

        var cariForm = modal.Show<CariKartEkleGuncelleComponent>("Yeni Cari Ekle", parameters: parameters, options: opt);
        var result = await cariForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var cariSecim = (CariKartDto)result.Data;
                cariModel.Cariadi = cariSecim.Adi;
                cariModel.Carikodu = cariSecim.Kodu;
                cariModel.Cariref = cariSecim.Logref;
            }
        }
    }

}
