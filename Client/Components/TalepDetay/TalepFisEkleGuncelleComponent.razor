<EditForm Model="talepFis">
    <DataAnnotationsValidator />

    @if (loadingCompleted == false)
    {
        <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
    }

    <MudCard>
        <MudCardContent>
            <div class="mt-12">
                <div class="form-group">

                    <div class="row">
                        <div class="col-md-3">
                            <MudTextField @bind-Value="talepFis.FisNo" Label="Talep No" ReadOnly="true" Variant="Variant.Outlined" />
                        </div>
                        <div class="col-md-3">
                            <MudTextField @bind-Value="talepFis.TarihString" Label="Tarih" ReadOnly="true" Variant="Variant.Outlined" />
                        </div>

                        <div class="col-md-3">
                            <MudTextField @bind-Value="talepFis.SaatString" Label="Saat" ReadOnly="true" Variant="Variant.Outlined" />
                        </div>

                    </div>
                    <MudDivider DividerType="DividerType.Middle" Class="my-6" />

                    <div class="row">
                        <div class="col-md-3">
                            <label>Proje</label>
                            <InputSelect class="form-control" @bind-Value="talepFis.ProjeRef" @bind-Value:after="GenerateTalepFisnNo">
                                @if (projeler != null)
                                {
                                    <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                    @foreach (var item in projeler)
                                    {
                                        <option value="@item.logref">@item.Adi</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                        <div class="col-md-3">
                            <label>Talep Türü</label>
                            <InputSelect class="form-control" @bind-Value="talepFis.TurRef" @bind-Value:after="GenerateTalepFisnNo">
                                @if (talepTuruList != null)
                                {
                                    <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                    @foreach (var item in talepTuruList)
                                    {
                                        <option value="@item.SabitDetayId">@item.Adi</option>
                                    }
                                }
                            </InputSelect>
                        </div>
                    </div>

                    <MudDivider DividerType="DividerType.Middle" Class="my-6"/>

                    <div class="row">



                        <div class="col-md-3">
                            <label>Teslim Yeri</label>
                            <InputSelect class="form-control" @bind-Value="talepFis.TeslimYeriRef">
                                @if (teslimYeriList != null)
                                {
                                    <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                    @foreach (var item in teslimYeriList)
                                    {
                                        <option value="@item.SabitDetayId">@item.Adi</option>
                                    }
                                }
                            </InputSelect>

                        </div>

                        <div class="col-md-3">
                            <label>Teslim Tarihi</label>
                            <InputDate @bind-Value="talepFis.TeslimTarihi" class="form-control" placeholder="Teslim Tarihi" />
                        </div>

                        <div class="col-md-3">
                            <label>Öncelik</label>
                            <InputSelect class="form-control" @bind-Value="talepFis.Oncelik">
                                <option value="0">@Utils.Mesajlar.Seciniz</option>
                                <option value="2" selected>Normal</option>
                                <option value="3">Yüksek</option>
                            </InputSelect>
                        </div>
                    </div>

                    <MudDivider DividerType="DividerType.Middle" Class="my-6"/>

                    <div class="row">

                        <div class="col-md-3">
                            <MudTextField @bind-Value="talepFis.TalepEden" Label="Talep Eden" Variant="Variant.Outlined" />
                        </div>

                        <div class="col-md-6">
                            <MudTextField @bind-Value="talepFis.Aciklama" Label="Açıklama" Lines=2 Variant="Variant.Outlined" />
                        </div>
                    </div>
                </div>
            </div>
        </MudCardContent>
        <MudCardActions>
            <MudButton Variant="Variant.Text" Color="Color.Primary">

                <div class="form-group">
                    <MudButton Disabled="@_processing" OnClick="ValidSubmit" Variant="Variant.Filled" Color="Color.Primary">
                        @if (_processing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                            <MudText Class="ms-2">Kaydediliyor...</MudText>
                        }
                        else
                        {
                            <MudText>Kaydet</MudText>
                        }
                    </MudButton>
                    <CancelButtonComponent Caption="Vazgeç" OnClick="Vazgec" />
                </div>

            </MudButton>
        </MudCardActions>
    </MudCard>






</EditForm>

@code {

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    YetkiHelper yetkiHelper { get; set; }

    [Inject]
    SabitHelper sabitHelper { get; set; }

    [Inject]
    ProjeHelper projeHelper { get; set; }

    [Inject]
    TalepFisHelper mainDataHelper { get; set; }

    [Parameter]
    public int? logRef { get; set; }

    [Parameter]
    public EventCallback OnVazgecClicked { get; set; }


    public bool IsUpdate { get; set; }
    private bool loadingCompleted = false;
    private bool _processing = false;

    TalepFisDto talepFis = new() { Tarih = DateTime.Now, Saat = DateTime.Now, TeslimTarihi = DateTime.Now.AddDays(3)};
    List<SisSabitlerDetayDto> teslimYeriList = new();
    List<SisSabitlerDetayDto> talepTuruList = new();

    List<ProjeDto> projeler = new();

    private string tableName = "talep_fis";
    private string listPage = "talepfis_liste";

    public async Task ValidSubmit()
    {
        if (IsUpdate)
            await UpdateRecord();
        else
            await SaveRecord();
    }

    private async Task UpdateRecord()
    {
        try
        {
            SubmitValidation();
        }
        catch (ClientException ex)
        {
            foreach (var item in ex.ErrorList)
            {
                Snackbar.Add(item, severity: Severity.Warning);
            }
            return;
        }
        catch (Exception)
        {
        }

        try
        {
            _processing = true;

            await mainDataHelper.UpdateRecord(talepFis);

            navigation.NavigateTo("/" + listPage);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task SaveRecord()
    {
        try
        {
            SubmitValidation();
        }
        catch (ClientException ex)
        {
            foreach (var item in ex.ErrorList)
            {
                Snackbar.Add(item, severity: Severity.Warning);
            }
            return;
        }
        catch (Exception)
        {
        }

        try
        {
            _processing = true;

            talepFis.logref = await yetkiHelper.RefNoAl(tableName);
            talepFis = await mainDataHelper.SaveRecord(talepFis);

            Snackbar.Add("Talep oluşturuldu", severity: Severity.Success);
            navigation.NavigateTo("/talepdetay_ekle/" + talepFis.logref);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    public void SubmitValidation()
    {
        var err = new List<string>();

        if (talepFis.ProjeRef == null || talepFis.ProjeRef == 0)
            err.Add("Proje boş geçilemez");

        if (talepFis.TurRef == null || talepFis.TurRef == 0)
            err.Add("Talep Türü boş geçilemez");

        if (talepFis.TalepEden == null)
            err.Add("Talep Eden boş geçilemez");

        if (talepFis.Aciklama == null)
            err.Add("Açıklama boş geçilemez");

        if (err.Count > 0)
        {
            var ex = new ClientException("Talep Hatası");
            ex.ErrorList = err;

            throw ex;
        }
    }

    public Task Vazgec()
    {
        navigation.NavigateTo("/talepfis_liste");
        return Task.CompletedTask;
    }

    public async Task LogRefUret()
    {
        var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
        if (selectedFirmaDonem == null)
            throw new Exception("Firma dönem seçilmedi");


        var result2 = await httpClient.GetServiceResponseAsync<int>(UrlHelper.RefNoAl + "?tablename=talepfis&firmaId=" + selectedFirmaDonem.firma_no.Value);
        talepFis.logref = result2;
    }

    public async Task LoadSelectBoxdata()
    {
        teslimYeriList = await sabitHelper.GetSabitDetay(SabitHelper.SabitTurler.TalepTeslimYeri);
        talepTuruList = await sabitHelper.GetSabitDetay(SabitHelper.SabitTurler.TalepTuru);


        projeler = await projeHelper.LoadRecords();

        await GenerateTalepFisnNo();

        loadingCompleted = true;
    }

    private async Task GenerateTalepFisnNo()
    {
        if (this.talepFis.ProjeRef != null && this.talepFis.TurRef != null)
        {
            var projeKodu = "000";
            var proje = projeler.FirstOrDefault(x => x.logref == this.talepFis.ProjeRef);
            if (proje != null)
                projeKodu = proje.Kodu;

            var turKodu = "00";
            var tur = talepTuruList.FirstOrDefault(x => x.SabitDetayId == this.talepFis.TurRef);
            if (tur != null)
                turKodu = tur.Kodu;

            var maxKod = await sabitHelper.GetMaxTalepFisNo(projeKodu, turKodu);

            this.talepFis.FisNo = maxKod;

        }
    }

    protected override async Task OnInitializedAsync()
    {
        IsUpdate = this.logRef.HasValue;

        if (IsUpdate)
            await LoadTalepFisData();

        await LoadSelectBoxdata();
    }

    private async Task LoadTalepFisData()
    {
        TalepFisRequestDto talepfisRequest = new();
        talepfisRequest.TalepFis = new TalepFisDto() { logref = this.logRef.Value };

        var response = await mainDataHelper.LoadRecords_ViewV030TalepFis(talepfisRequest);
        var tfview = response.FirstOrDefault();

        talepFis.FisNo = tfview.FisNo;
        talepFis.insdate = tfview.InsDate;
        talepFis.insuser = tfview.InsUser;
        talepFis.DurumRef = tfview.DurumRef.HasValue ? tfview.DurumRef.Value : 0;
        talepFis.Aciklama = tfview.Aciklama;
        talepFis.Oncelik = tfview.Oncelik.HasValue ? tfview.Oncelik.Value : byte.Parse("0");
        talepFis.ProjeAdi = tfview.ProjeAdi;
        talepFis.ProjeRef = tfview.ProjeRef;
        talepFis.TalepEden = tfview.TalepEden;
        talepFis.TeslimTarihi = tfview.TeslimTarihi.HasValue ? tfview.TeslimTarihi.Value : DateTime.Now.AddDays(3);
        talepFis.TeslimYeriRef = tfview.TeslimYeriRef.HasValue ? tfview.TeslimYeriRef.Value : 187;
        talepFis.logref = tfview.LogRef;
        talepFis.TurRef = tfview.TurRef;
    }
}
