<EditForm Model="teklif">
    <DataAnnotationsValidator />
    <ValidationSummary />

    @if (loadingCompleted == false)
    {
        <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
    }

    <div class="mt-5">
        <div class="form">
            <div class="form-group">

                <div class="row">

                    <div class="col-md-4">
                        <label>Teklif No</label>
                        <InputText @bind-Value="teklif.Teklifno" class="form-control" />
                    </div>
                    <div class="col-md-4">
                        <label>Teklif Tarihi</label>
                        <InputDate @bind-Value="teklif.Tarih" class="form-control"></InputDate>
                    </div>
                </div>

            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-2">
                        <label>Cari Kodu</label>
                        <InputText @bind-Value="teklif.Carikodu" class="form-control" placeholder="Cari Kodu" disabled />
                    </div>
                    <div class="col-md-8">
                        <label>Cari Adı</label>
                        <div class="row">
                            <div class="col">
                                <InputText @bind-Value="teklif.Cariadi" class="form-control" placeholder="Cari Adı" disabled />
                            </div>
                            <div class="col">
                                <MudButton Variant="Variant.Filled" IconColor="Color.Secondary" StartIcon="@Icons.Material.Filled.FindInPage" OnClick="CariListesiAc" Size=Size.Medium>Bul</MudButton>
                                <MudButton Variant="Variant.Filled" IconColor="Color.Secondary" StartIcon="@Icons.Material.Filled.AddCard" OnClick="YeniCariEkle" Size=Size.Medium>Yeni Cari</MudButton>

                            </div>
                        </div>

                    </div>

                </div>

            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <label>Firma Yetkilisi</label>
                        <div class="row">
                            <div class="col">
                                <InputSelect @bind-Value="teklif.IlgiliAdi" class="form-control">
                                    @if (KisiListesi != null)
                                    {
                                        <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                        @foreach (var item in KisiListesi)
                                        {
                                            <option value="@item.Tamadi">@item.Tamadi</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-3">
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PersonAdd" OnClick="YeniKisiEkle" IconColor="Color.Secondary" Size=Size.Medium>Ekle</MudButton>
                            </div>
                        </div>


                    </div>
                    <div class="col-md-4">
                        <label>Satış Temsilcisi</label>
                        <InputSelect @bind-Value="teklif.Lpersonelref" class="form-control">
                            @if (PersonelListesi != null)
                            {
                                <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                @foreach (var item in PersonelListesi)
                                {
                                    <option value="@item.LOGICALREF">@item.DEFINITION_</option>
                                }
                            }
                        </InputSelect>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <label>Teslim Şekli</label>
                        <InputSelect @bind-Value="teklif.TeslimSekli" class="form-control">
                            @if (TeslimSekliListesi != null)
                            {
                                <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                @foreach (var item in TeslimSekliListesi)
                                {
                                    <option value="@item">@item</option>
                                }
                            }
                        </InputSelect>
                    </div>

                    <div class="col-md-4">
                        <label>Teslim Tarihi</label>
                        <InputDate @bind-Value="teklif.TeslimTarihi" class="form-control"></InputDate>
                    </div>
                </div>

            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <label>Ödeme Planı</label>

                        <InputSelect @bind-Value="teklif.LodemePlani" class="form-control">
                            @if (OdemePlaniListesi != null)
                            {
                                <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                @foreach (var item in OdemePlaniListesi)
                                {
                                    <option value="@item.LOGICALREF">@item.DEFINITION_</option>
                                }
                            }
                        </InputSelect>
                    </div>
                    <div class="col-md-4">
                        <label>Proje Adı</label>
                        <InputText @bind-Value="teklif.Proje" class="form-control"></InputText>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-2">
                        <label>Teklif Para Birimi</label>

                        <InputSelect class="form-control" @bind-Value="DovizTuruBilgisi">
                            @if (DovizListesi != null)
                            {
                                <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                @foreach (var item in DovizListesi)
                                {
                                    <option value="@item.CURTYPE">@item.CURCODE</option>
                                }
                            }
                        </InputSelect>

                    </div>
                    <div class="col-md-4">
                        <label>Döviz Kuru</label>
                        <InputNumber @bind-Value="teklif.Dovizkuruid" class="form-control" placeholder="@_DovizKuruState" />
                    </div>
                    <div class="col-md-2">
                        <label>Genel İsk.%</label>
                        <InputNumber @bind-Value="teklif.Gniskoran" class="form-control" />
                    </div>

                </div>
            </div>

            <MudTabs Elevation="2" Rounded="true" Centered="false" Class="my-6">
                <MudTabPanel Icon="@Icons.Material.Filled.DocumentScanner" Text="Teklif Şartları" BadgeColor="Color.Error">
                    <br />
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-8">
                                <div class="row">
                                    <div class="col">
                                        <InputTextArea @bind-Value="teklif.Notlar" class="form-control" rows="8"></InputTextArea>
                                    </div>
                                    <div class="col-md-2">
                                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.DocumentScanner"
                                                   IconColor="Color.Secondary" Size="Size.Small" OnClick="VarolanSozlesme">Hazır Sözleşme</MudButton>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.LocationCity" Text="Sevk Adresi" BadgeColor="Color.Success">
                    <br />
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-6">
                                <label>Adres Kodu</label>
                                <div class="row">
                                    <div class="col">
                                        <InputText @bind-Value="teklif.Sevkkodu" class="form-control" disabled />
                                    </div>
                                    <div class="col-md-3">
                                        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.LocationCity"
                                                   IconColor="Color.Secondary" Size="Size.Small" OnClick="SevkAdresiSec">Sevk Adresi</MudButton>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-8">
                                <label>Adres Açıklaması</label>
                                <InputText @bind-Value="teklif.SevkEdilecekBayiAdi" class="form-control" disabled />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-8">
                                <label>Adres S1</label>
                                <InputText @bind-Value="teklif.Sevkadres1" class="form-control" disabled />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-8">
                                <label>Adres S2</label>
                                <InputText @bind-Value="teklif.Sevkadres2" class="form-control" disabled />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-4">
                                <label>İlçe</label>
                                <InputText @bind-Value="teklif.Ilce" class="form-control" disabled />
                            </div>
                            <div class="col-md-4">
                                <label>İl</label>
                                <InputText @bind-Value="teklif.Il" class="form-control" disabled />
                            </div>
                        </div>
                    </div>

                </MudTabPanel>
                <MudTabPanel Icon="@Icons.Material.Filled.Description" Text="Açıklamalar" BadgeColor="Color.Success">
                    <br />
                    <div class="form-group">
                        <div class="row">
                            <div class="col-md-8">
                                <InputText @bind-Value="teklif.Aciklama1" class="form-control"/>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-8">
                                <InputText @bind-Value="teklif.Aciklama2" class="form-control" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-8">
                                <InputText @bind-Value="teklif.Aciklama3" class="form-control" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-8">
                                <InputText @bind-Value="teklif.Aciklama4" class="form-control" />
                            </div>
                        </div>
                    </div>

                </MudTabPanel>
            </MudTabs>

        </div>
    </div>


    <div class="form-group">
        <MudButton Disabled="@_processing" OnClick="ValidSubmit" Variant="Variant.Filled" Color="Color.Primary">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Kaydediliyor...</MudText>
            }
            else
            {
                <MudText>Kaydet</MudText>
            }
        </MudButton>
        <CancelButtonComponent Caption="Vazgeç" OnClick="Vazgec" />
    </div>

</EditForm>

@code {
    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    YetkiHelper yetkiHelper { get; set; }

    [Inject]
    TeklifHelper mainDataHelper { get; set; }

    [Parameter]
    public int? logRef { get; set; }

    private bool loadingCompleted = false;
    private bool _processing = false;
    private string listPage = "stek_listef_detay";
    private string tableName = "teklif";


    private int _dovizTuru = -1;
    public int DovizTuruBilgisi
    {
        get
        {
            if (teklif.Dovizrefid.HasValue == false)
                return -1;

            return teklif.Dovizrefid.Value;
        }
        set
        {
            _dovizTuru = value;
            teklif.Dovizrefid = _dovizTuru;


            DovizKuruGetir().GetAwaiter();


        }
    }

    private string _DovizKuruState = "";

    public IEnumerable<DovizDto> DovizListesi { get; set; }

    [Parameter]
    public EventCallback OnVazgecClicked { get; set; }

    public bool IsUpdate { get; set; }

    TeklifDto teklif = new TeklifDto();

    public IEnumerable<string> TeslimSekliListesi { get; set; }

    public List<PersonelDto> PersonelListesi { get; set; }

    public List<OdemePlaniDto> OdemePlaniListesi { get; set; }

    public List<KisilerDto> KisiListesi { get; set; }

    protected override async Task OnInitializedAsync()
    {
        IsUpdate = logRef.HasValue;

        if (!IsUpdate)
            await NewRecord();
        else
            await GetTeklif();

        await TeslimListesiCek();
        await PersonelListesiCek();
        await OdemePlaniCek();
        await DovizListesiGetir();
        await GetKisiListesi();
        loadingCompleted = true;
    }

    public async Task NewRecord()
    {
        teklif.Teklifno = await yetkiHelper.FisNoAl("teklif","teklifno");
        teklif.Tarih = DateTime.Now;
        teklif.TeslimSekli = "MÜŞTERİ TESLİM";
        VarolanSozlesme();
    }

    public async Task GetTeklif()
    {
        if (logRef.HasValue == false)
            return;

        try
        {
            this.teklif = await mainDataHelper.LoadRecord(this.logRef.Value);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public async Task ValidSubmit()
    {
        if (IsUpdate)
            await UpdateTeklif();
        else
            await SaveTeklif();
    }

    public async Task CariListesiAc()
    {
        var opt = new ModalOptions();
        
        var cariForm = modal.Show<Pages.Cari.Cari_Sec>("Cari Seç", opt);
        var result = await cariForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var cariSecim = (VCariKartDto)result.Data;
                teklif.Cariadi = cariSecim.Adi;
                teklif.Carikodu = cariSecim.Kodu;
                teklif.Cariref = cariSecim.Logref;
                await GetKisiListesi();
            }

        }
    }

    public async Task YeniCariEkle()
    {
        var opt = new ModalOptions();
        
        var parameters = new ModalParameters();
        parameters.Add("modalForm", 1);

        var cariForm = modal.Show<CariKartEkleGuncelleComponent>("Yeni Cari Ekle", parameters: parameters, options: opt);
        var result = await cariForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var cariSecim = (CariKartDto)result.Data;
                teklif.Cariadi = cariSecim.Adi;
                teklif.Carikodu = cariSecim.Kodu;
                teklif.Cariref = cariSecim.Logref;
                KisiListesi = new List<KisilerDto>();
            }
        }
    }

    public async Task YeniKisiEkle()
    {
        if (!teklif.Cariref.HasValue)
            return;

        var opt = new ModalOptions();
        
        var parameters = new ModalParameters();
        parameters.Add("modalForm", 1);
        parameters.Add("CariKartRef", teklif.Cariref);

        var cariForm = modal.Show<CariKartKisiEkleGuncelleComponent>("Yeni Kişi Ekle", parameters: parameters, options: opt);
        var result = await cariForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var Secim = (KisilerDto)result.Data;
                KisiListesi.Add(Secim);
            }

        }
    }

    private async Task UpdateTeklif()
    {
        try
        {
            TeklifValidation();
        }
        catch (ClientException ex)
        {
            foreach (var item in ex.ErrorList)
            {
                Snackbar.Add(item, severity: Severity.Warning);
            }
            return;
        }
        catch (Exception)
        {
        }

        try
        {
            _processing = true;
            await mainDataHelper.UpdateRecord(teklif);
            Snackbar.Add("Teklif güncellendi", severity: Severity.Success);
            navigation.NavigateTo("/" + listPage + "/" + teklif.Logref);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task SaveTeklif()
    {
        try
        {
            TeklifValidation();
        }
        catch (ClientException ex)
        {
            foreach (var item in ex.ErrorList)
            {
                Snackbar.Add(item, severity: Severity.Warning);
            }
            return;
        }
        catch (Exception)
        {
        }

        try
        {
            _processing = true;
            teklif.Logref = await yetkiHelper.RefNoAl("teklif");
            teklif.Teklifno = await yetkiHelper.FisNoAl("teklif","teklifno");
            teklif.Dovizref = 20;
            teklif.Dovizkuru = await yetkiHelper.DovizKuruAl(teklif.Dovizref.Value, teklif.Tarih.Value,4);
            teklif.Tarih = teklif.Tarih.HasValue ? teklif.Tarih : DateTime.Now;
            teklif.Saat = teklif.Saat.HasValue ? teklif.Saat : DateTime.Now;
            teklif.Trcode = 1;
            teklif.Duruminfo = "Teklif Hazırlanıyor";
            teklif.Revizyon = 0;
            teklif.Revzno = "";

            await mainDataHelper.SaveRecord(teklif);
            Snackbar.Add("Teklif eklendi", severity: Severity.Success);
            navigation.NavigateTo("/" + listPage + "/" + teklif.Logref);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    public async Task Vazgec()
    {
        await OnVazgecClicked.InvokeAsync();
    }

    public async Task TeslimListesiCek()
    {
        try
        {
            var result = await httpClient.GetServiceResponseAsync<IEnumerable<string>>("/api/helper/GetTeslimSekliList");
            if (result != null)
            {
                TeslimSekliListesi = result;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public async Task PersonelListesiCek()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            var result = await httpClient.GetServiceResponseAsync<List<PersonelDto>>("/api/helper/GetPersonelList?logofirmno=" + selectedFirmaDonem.logo_firma.Value);
            if (result != null)
            {
                PersonelListesi = result;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public async Task OdemePlaniCek()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            var result = await httpClient.GetServiceResponseAsync<List<OdemePlaniDto>>("/api/helper/GetOdemePlaniList?logofirmno=" + selectedFirmaDonem.logo_firma.Value);
            if (result != null)
            {
                OdemePlaniListesi = result;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public async Task DovizListesiGetir()
    {
        try
        {
            DovizListesi = await yetkiHelper.DovizListesiGetir();
        }
        catch (Exception ex)
        {
            await ModalManager.ShowMessageAsync("Hata", ex.Message);
        }
    }

    public async Task DovizKuruGetir()
    {
        try
        {
            if (teklif.Dovizrefid <= 0)
            {
                throw new Exception("Döviz tipi seçmelisiniz");
            }
            _DovizKuruState = "Çekiliyor...";
            teklif.Dovizkuruid = await yetkiHelper.DovizKuruAl(teklif.Dovizrefid.Value, teklif.Tarih.Value,4);
            _DovizKuruState = "Güncel";
            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

    public void TeklifValidation()
    {
        var err = new List<string>();

        if (teklif.Cariref == null)
            err.Add("Cari Hesap boş geçilemez");

        if (string.IsNullOrEmpty(teklif.IlgiliAdi))
            err.Add("Firma yetkilisi boş geçilemez");

        if (teklif.Lpersonelref == null)
            err.Add("Satış temsilcisi boş geçilemez");

        if (teklif.TeslimTarihi == null)
            err.Add("Teslim tarihi boş geçilemez");

        if (teklif.Dovizrefid == null)
            err.Add("Teklif para birimi boş geçilemez");

        if (err.Count > 0)
        {
            var ex = new ClientException("Teklif Hatası");
            ex.ErrorList = err;

            throw ex;
        }
    }

    public async Task GetKisiListesi()
    {
        try
        {
            if (teklif.Cariref.HasValue == false)
                return;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            var result = await httpClient.GetServiceResponseAsync<List<KisilerDto>>(UrlHelper.CariKartKisiGetir + "?cariref=" + teklif.Cariref + "&firmaId=" + selectedFirmaDonem.firma_no);
            if (result != null)
            {
                KisiListesi = result;
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    public async Task VarolanSozlesme()
    {
        var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

        if (selectedFirmaDonem.firma_no.Value.ToString() == Consts.MakpaFirmaNo)
            this.teklif.Notlar = Utils.Consts.TeklifSozlesmesiMakpa;
        else
            this.teklif.Notlar = Utils.Consts.TeklifSozlesmesi;
    }

    public async Task SevkAdresiSec()
    {
        if (!teklif.Cariref.HasValue)
            return;

        var opt = new ModalOptions();
        
        var parameters = new ModalParameters();
        parameters.Add("CariKartRef", teklif.Cariref);

        var Form = modal.Show<Pages.Cari.Cari_AdresSec>("Adres Seç", parameters: parameters, options: opt);
        var result = await Form.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var Secim = (SevkAdresDto)result.Data;
                teklif.Carisevkadrref = Secim.Logref;
                teklif.SevkEdilecekBayiAdi = Secim.SevkEdilecekBayiAdi;
                teklif.Sevkkodu = Secim.Sevkkodu;
                teklif.Sevkadres1 = Secim.Sevkadres1;
                teklif.Sevkadres2 = Secim.Sevkadres2;
                teklif.Ilce = Secim.Ilce;
                teklif.Il = Secim.Il;
            }

        }
    }
}
