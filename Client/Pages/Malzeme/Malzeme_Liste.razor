@page "/malzeme_listef"

<HeaderSearchBar header="header"
                 ShowButtons="false" ShowFilterButton="true"
                 onDoneButtonClicked="BtnAraClick" onFilterButtonClicked="BtnDetayliAraClick" ShowSearchSection="true"></HeaderSearchBar>

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<MudTable Items="@mainDataList" RowsPerPage="100" FixedHeader="true" Height="500px" Dense="true" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="Ekle" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Kodu</MudTh>
        <MudTh>Adı</MudTh>
        <MudTh>Adı 2</MudTh>
        <MudTh>Birim</MudTh>
        <MudTh>Marka Kodu</MudTh>
        <MudTh>Menşei</MudTh>
        <MudTh>Grup Kodu</MudTh>
        <MudTh>Tedarikçi</MudTh>
        <MudTh>Kdv %</MudTh>
        <MudTh>Maliyet Fiyatı</MudTh>
        <MudTh>Maliyet Döviz</MudTh>
        <MudTh>Satış Fiyatı</MudTh>
        <MudTh>Satış Döviz</MudTh>
        <MudTh>Logo Kodu</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudIconButton Icon="@Icons.TwoTone.Edit" Variant="Variant.Outlined" Color="Color.Primary" OnClick="(() => Guncelle(context.Logref))" Size="Size.Medium" />
        </MudTd>
        <MudTd DataLabel="Kodu">@context.Kodu</MudTd>
        <MudTd DataLabel="Adı">@context.Adi</MudTd>
        <MudTd DataLabel="Adı 2">@context.Adi3</MudTd>
        <MudTd DataLabel="Birim">@context.Birim</MudTd>
        <MudTd DataLabel="Marka">@context.Marka</MudTd>
        <MudTd DataLabel="Menşei">@context.Mensei</MudTd>
        <MudTd DataLabel="Grup">@context.Grupkodu</MudTd>
        <MudTd DataLabel="Tedarikçi">@context.TedarikciAdi</MudTd>
        <MudTd DataLabel="KDV">@context.Kdv</MudTd>
        <MudTd DataLabel="Maliyet">@context.Alfiyat</MudTd>
        <MudTd DataLabel="Maliyet Döviz">@context.AlfiyatDov</MudTd>
        <MudTd DataLabel="Satış">@context.Satfiyat</MudTd>
        <MudTd DataLabel="Satış Döviz">@context.SatfiyatDov</MudTd>
        <MudTd DataLabel="Logo Kodu">@context.Logokodu</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>
</MudTable>

@code
{

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [CascadingParameter] IModalService modal { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();

    public List<MalzemeKartDto> mainDataList = new List<MalzemeKartDto>();
    private bool loadingCompleted = false;

    protected override async Task OnInitializedAsync()
    {
        header.HeaderText = "CRM Malzeme Listesi";

        await LoadList();
        loadingCompleted = true;
    }

    private async Task LoadList()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            // if (selectedFirmaDonem.firma_no.Value.ToString() == Consts.MakpaFirmaNo || selectedFirmaDonem.firma_no.Value.ToString() == Consts.GASTROMOREFirmaNo)
            // {
            //     var ondegerFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.OndegerFirmaDonem);
            //     if (ondegerFirmaDonem != null)
            //         selectedFirmaDonem = ondegerFirmaDonem;
            // }

            loadingCompleted = false;
            mainDataList = await httpClient.GetServiceResponseAsync<List<MalzemeKartDto>>(UrlHelper.MalzemeKartListesi + "?firmaId=" + selectedFirmaDonem.firma_no.Value);
            loadingCompleted = true;
        }
        catch (Exception)
        {
            throw;
        }
    }

    public async Task BtnAraClick()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            // if (selectedFirmaDonem.firma_no.Value.ToString() == Consts.MakpaFirmaNo || selectedFirmaDonem.firma_no.Value.ToString() == Consts.GASTROMOREFirmaNo)
            // {
            //     var ondegerFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.OndegerFirmaDonem);
            //     if (ondegerFirmaDonem != null)
            //         selectedFirmaDonem = ondegerFirmaDonem;
            // }

            loadingCompleted = false;
            this.StateHasChanged();
            var request = new MalzemeKartRequestDto();
            request.FirmaId = selectedFirmaDonem.firma_no.Value;
            if (!string.IsNullOrWhiteSpace(header.SearchText))
                request.SearchText = header.SearchText;

            mainDataList = await httpClient.PostGetServiceResponseAsync<List<MalzemeKartDto>, MalzemeKartRequestDto>(UrlHelper.MalzemeKartAra, request);
            if (mainDataList == null || mainDataList.Count == 0)
                Snackbar.Add("Aradığınız kriterlere uygun kayıt bulunamadı", severity: Severity.Warning);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            loadingCompleted = true;
        }
    }

    public async Task BtnDetayliAraClick()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            // if (selectedFirmaDonem.firma_no.Value.ToString() == Consts.MakpaFirmaNo || selectedFirmaDonem.firma_no.Value.ToString() == Consts.GASTROMOREFirmaNo)
            // {
            //     var ondegerFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.OndegerFirmaDonem);
            //     if (ondegerFirmaDonem != null)
            //         selectedFirmaDonem = ondegerFirmaDonem;
            // }

            var opt = new ModalOptions();
            
            var filterForm = modal.Show<Pages.Malzeme.Stok_Liste_Filters>("Arama Seçenekleri", opt);
            var result = await filterForm.Result;

            if (!result.Cancelled)
            {
                if (result.Data != null)
                {
                    loadingCompleted = false;
                    this.StateHasChanged();

                    var mrequest = (MalzemeStokRequestDto)result.Data;

                    var request = new MalzemeKartRequestDto();
                    request.FirmaId = selectedFirmaDonem.firma_no.Value;
                    if (!string.IsNullOrWhiteSpace(header.SearchText))
                        request.SearchText = header.SearchText;

                    if (!string.IsNullOrWhiteSpace(mrequest.MalzemeMarka))
                        request.Marka = mrequest.MalzemeMarka;
                    if (!string.IsNullOrWhiteSpace(mrequest.MalzemeAdi))
                        request.MalzemeAdi = mrequest.MalzemeAdi;
                    if (!string.IsNullOrWhiteSpace(mrequest.MalzemeKodu))
                        request.MalzemeKodu = mrequest.MalzemeKodu;

                    mainDataList = await httpClient.PostGetServiceResponseAsync<List<MalzemeKartDto>, MalzemeKartRequestDto>(UrlHelper.MalzemeKartAra, request);
                    if (mainDataList == null || mainDataList.Count == 0)
                        Snackbar.Add("Aradığınız kriterlere uygun kayıt bulunamadı", severity: Severity.Warning);
                }
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            loadingCompleted = true;
        }
    }

    public void Guncelle(int logref)
    {
        navigation.NavigateTo("/malzeme_kartf_guncelle/" + logref);
    }

    public void Ekle()
    {
        navigation.NavigateTo("/malzeme_kartf_ekle");
    }

}
