@page "/stok_listef"

<HeaderSearchBar header="header"
                 ShowButtons="false" ShowFilterButton="true"
                 onDoneButtonClicked="BtnAraClick" onFilterButtonClicked="BtnDetayliAraClick" ShowSearchSection="true"></HeaderSearchBar>

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<MudTable Items="@mainDataList" FixedHeader="true" Height="500px" RowsPerPage="1000" Dense="true" Hover="true" Bordered="true" Striped="true">
    <ToolBarContent>
        <MudIconButton Icon="@Icons.Material.Filled.FileDownload" OnClick="DownloadCsv" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Kodu</MudTh>
        <MudTh>Adı</MudTh>
        <MudTh>Marka</MudTh>
        <MudTh>Birim</MudTh>
        <MudTh>Fiili Miktar</MudTh>
        <MudTh>Rezerv Miktar</MudTh>
        <MudTh>Öneri Sip. Miktar</MudTh>
        <MudTh>Satılabilir Miktar</MudTh>
        <MudTh>Alım Sip. Miktar</MudTh>
        <MudTh>Alım Sip. Termin</MudTh>
        <MudTh>Satış Fiyatı</MudTh>
        <MudTh>Satış Döviz</MudTh>
        @if (@maliyetGorYonetici)
        {
            <MudTh>Alış Fiyatı 1</MudTh>
        }
        @if (@maliyetGorSatisci)
        {
            <MudTh>Alış Fiyatı 2</MudTh>
        }
        <MudTh>Alış Döviz</MudTh>
        <MudTh>MAKPA Stok</MudTh>
        <MudTh>Arıza Stok</MudTh>
        <MudTh>2.El Stok</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Kodu">@context.MalzemeKodu</MudTd>
        <MudTd DataLabel="Adı">@context.MalzemeAdi</MudTd>
        <MudTd DataLabel="Marka">@context.MalzemeMarka</MudTd>
        <MudTd DataLabel="Birim">@context.BirimKodu</MudTd>
        <MudTd DataLabel="Fiili Miktar">@context.StokMiktari</MudTd>
        <MudTd DataLabel="Rezerv Miktar">@context.RezervMiktari</MudTd>
        <MudTd DataLabel="Öneri Sip.Miktar">@context.BekleyenOneriSatisSiparisMiktar</MudTd>
        <MudTd DataLabel="Satılabilir Miktar">@context.StokMiktari2</MudTd>
        <MudTd DataLabel="Alım Sip. Miktar">@context.BekleyenAlimSiparisMiktar</MudTd>
        <MudTd DataLabel="Alım Sip. Termin">@context.BekleyenAlimSiparisTeslimTarihiFormatted</MudTd>
        <MudTd DataLabel="Satış Fiyatı">@context.SatisFiyatiFormatted</MudTd>
        <MudTd DataLabel="Satış Döviz">@context.SatisFiyatiDoviz</MudTd>
        @if (@maliyetGorYonetici)
        {
            <MudTd DataLabel="Alış Fiyatı">@context.AlisFiyatiFormatted</MudTd>
        }
        @if (@maliyetGorSatisci)
        {
            <MudTd DataLabel="Alış Fiyatı">@context.AlisFiyati2Formatted</MudTd>
        }
        <MudTd DataLabel="Alış Döviz">@context.AlisFiyatiDoviz</MudTd>
        <MudTd DataLabel="MAKPA Stok">@context.StokMiktariMakpa</MudTd>
        <MudTd DataLabel="Arıza Stok">@context.StokMiktariAriza</MudTd>
        <MudTd DataLabel="2.El Stok">@context.StokMiktari2el</MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>
</MudTable>

@code
{

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    DownloadHelper downloadHelper { get; set; }

    [CascadingParameter] IModalService modal { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();

    public List<MalzemeStokDto> mainDataList = new List<MalzemeStokDto>();
    private bool loadingCompleted = true;
    private bool maliyetGorYonetici = false;
    private bool maliyetGorSatisci = false;

    protected override async Task OnInitializedAsync()
    {
        header.HeaderText = "Stok Listesi";
        await KullaniciYetkileriGetir();

        await BtnDetayliAraClick();
    }

    public async Task BtnAraClick()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            if (selectedFirmaDonem.firma_no.Value.ToString() == Consts.MakpaFirmaNo || selectedFirmaDonem.firma_no.Value.ToString() == Consts.GASTROMOREFirmaNo)
            {
                var ondegerFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.OndegerFirmaDonem);
                if (ondegerFirmaDonem != null)
                    selectedFirmaDonem = ondegerFirmaDonem;
            }

            loadingCompleted = false;
            this.StateHasChanged();
            var request = new MalzemeStokRequestDto();
            request.LogoFirmaNo = selectedFirmaDonem.logo_firma.Value;
            request.LogoDonemNo = selectedFirmaDonem.logo_donem.Value;
            request.YedekParcaGelsin = false;

            if (!string.IsNullOrWhiteSpace(header.SearchText))
                request.SearchText = '%' + header.SearchText + '%';

            mainDataList = await httpClient.PostGetServiceResponseAsync<List<MalzemeStokDto>, MalzemeStokRequestDto>(UrlHelper.MalzemeStokGetir, request);
            if (mainDataList == null || mainDataList.Count == 0)
                Snackbar.Add("Aradığınız kriterlere uygun kayıt bulunamadı", severity: Severity.Warning);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            loadingCompleted = true;
        }
    }

    public async Task BtnDetayliAraClick()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            if (selectedFirmaDonem == null)
                throw new Exception("Firma dönem seçilmedi");

            if (selectedFirmaDonem.firma_no.Value.ToString() == Consts.MakpaFirmaNo || selectedFirmaDonem.firma_no.Value.ToString() == Consts.GASTROMOREFirmaNo)
            {
                var ondegerFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.OndegerFirmaDonem);
                if (ondegerFirmaDonem != null)
                    selectedFirmaDonem = ondegerFirmaDonem;
            }

            var opt = new ModalOptions();
            opt.ContentScrollable = true;

            var filterForm = modal.Show<Pages.Malzeme.Stok_Liste_Filters>("Rapor Seçenekleri", opt);
            var result = await filterForm.Result;

            if (!result.Cancelled)
            {
                if (result.Data != null)
                {
                    loadingCompleted = false;
                    this.StateHasChanged();

                    var request = (MalzemeStokRequestDto)result.Data;

                    request.LogoFirmaNo = selectedFirmaDonem.logo_firma.Value;
                    request.LogoDonemNo = selectedFirmaDonem.logo_donem.Value;

                    if (!string.IsNullOrWhiteSpace(header.SearchText))
                        request.SearchText = '%' + header.SearchText + '%';

                    if (!string.IsNullOrWhiteSpace(request.MalzemeMarka))
                        request.MalzemeMarka = '%' + request.MalzemeMarka + '%';
                    if (!string.IsNullOrWhiteSpace(request.MalzemeAdi))
                        request.MalzemeAdi = '%' + request.MalzemeAdi + '%';
                    if (!string.IsNullOrWhiteSpace(request.MalzemeKodu))
                        request.MalzemeKodu = '%' + request.MalzemeKodu + '%';

                    mainDataList = await httpClient.PostGetServiceResponseAsync<List<MalzemeStokDto>, MalzemeStokRequestDto>(UrlHelper.MalzemeStokGetir, request);
                    if (mainDataList == null || mainDataList.Count == 0)
                        Snackbar.Add("Aradığınız kriterlere uygun kayıt bulunamadı", severity: Severity.Warning);
                }
            }

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            loadingCompleted = true;
        }
    }

    public async Task KullaniciYetkileriGetir()
    {
        try
        {
            var kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            var result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.GetKullaniciYetkisi + "?kullanicikodu=" + kullanicikodu + "&yetkikodu=" + KullaniciYetkiKodlari.TeklifteMaliyet1GorebilsinYoNETiCi);

            maliyetGorYonetici = result == 1;

            result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.GetKullaniciYetkisi + "?kullanicikodu=" + kullanicikodu + "&yetkikodu=" + KullaniciYetkiKodlari.TeklifteMaliyet2GorebilsinPersonel);

            maliyetGorSatisci = result == 1;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

    public async Task DownloadCsv()
    {
        var content = @"Malzeme Kodu;Malzeme Adı;Marka;Birim;Fiili Miktar;Rezerv Miktar;Öneri Sip.Miktar;Satılabilir Miktar;Alım Sip.Miktar;Alım Sip.Termin;Satış Fiyatı;Satış Döviz";

        @if (@maliyetGorYonetici)
        {
            content += @";Alış Fiyatı";
        }
        @if (@maliyetGorSatisci)
        {
            content += @";Alış Fiyatı";
        }

        content += @";Alış Döviz";
        content += Environment.NewLine;

        foreach (var item in mainDataList)
        {
            content += item.MalzemeKodu + ";" + item.MalzemeAdi + ";" + item.MalzemeMarka + ";" + item.BirimKodu + ";"
                + item.StokMiktari + ";" + item.RezervMiktari + ";" + item.BekleyenOneriSatisSiparisMiktar + ";" + item.StokMiktari2 + ";"
                + item.BekleyenAlimSiparisMiktar + ";" + item.BekleyenAlimSiparisTeslimTarihiFormatted + ";" + item.SatisFiyatiFormatted + ";" + item.SatisFiyatiDoviz + ";";

            @if(@maliyetGorYonetici)
            {
                content += item.AlisFiyatiFormatted + ";";
            }

            @if(maliyetGorSatisci)
            {
                content += item.AlisFiyati2Formatted + ";";
            }

            content += item.AlisFiyatiDoviz + ";";
            content += Environment.NewLine;
        }
        await downloadHelper.DownloadCsv(content);
    }
}
