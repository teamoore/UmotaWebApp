@page "/stek_listef/{duruminfo?}"

<HeaderSearchBar header="header"
                 ShowButtons="false" ShowFilterButton="true"
                 onDoneButtonClicked="BtnAraClick" onFilterButtonClicked="BtnDetayliAraClick" ShowSearchSection="true"></HeaderSearchBar>

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<MudTable Items="@mainDataList" FixedHeader="true" Height="500px" Dense="true" Hover="true" RowsPerPage="100" Bordered="true" Striped="true">
    <ToolBarContent>
        @if (menuYetkiDto.Insert)
        {
            <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="YeniTeklif" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" Title="Yeni Kayıt Ekle" />
        }
        &nbsp;
        <MudIconButton Icon="@Icons.Material.Filled.FileDownload" OnClick="DownloadCsv" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" Title="Excel indir" />
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Durum</MudTh>
        <MudTh>Teklif No</MudTh>
        <MudTh>Rvz No</MudTh>
        <MudTh>Tarih</MudTh>
        <MudTh>Cari Kodu</MudTh>
        <MudTh>Cari Adı</MudTh>
        <MudTh>Tutar TL</MudTh>
        <MudTh>Tutar</MudTh>
        <MudTh>Döviz</MudTh>
        <MudTh>Proje Adı</MudTh>
        <MudTh>Satış Temsilcisi</MudTh>
        <MudTh>Teslim Tarihi</MudTh>
        <MudTh>Açıklama</MudTh>
        <MudTh>Kaydı Giren</MudTh>
        <MudTh>#</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            <MudMenu Icon="@Icons.Material.Filled.MoreVert" Color="Color.Primary">
                @if (menuYetkiDto.Update)
                {
                    <MudMenuItem OnClick="(() => TeklifDetay(context.Logref))">Değiştir</MudMenuItem>
                }
                <MudMenuItem OnClick="(() => TeklifDetayIncele(context.Logref))">İncele</MudMenuItem>
                <MudMenuItem OnClick="(() => TeklifDurumDegistir(context.Logref,null))">Durum Değiştir</MudMenuItem>
                @if (menuYetkiDto.IsAdmin)
                {
                    <MudMenuItem OnClick="(() => TeklifDurumDegistir(context.Logref,1))">Durum Değiştir(Admin)</MudMenuItem>
                }
                <MudMenuItem OnClick="(() => TeklifDurumDetay(context.Logref))">Durum Geçmişi</MudMenuItem>
            </MudMenu>
        </MudTd>
        <MudTd DataLabel="Durum">@context.Duruminfo</MudTd>
        <MudTd DataLabel="Teklif No">@context.Teklifno</MudTd>
        <MudTd DataLabel="Rvz No">@context.Revzno</MudTd>
        <MudTd DataLabel="Tarih">@context.TarihFormatted</MudTd>
        <MudTd DataLabel="Cari Kodu">@context.Carikodu</MudTd>
        <MudTd DataLabel="Cari Adı">@context.Cariadi</MudTd>
        <MudTd DataLabel="Tutar TL" Style="text-align:right">@(Helper.FormattedDouble(context.Tutarmatrahtl))</MudTd>
        <MudTd DataLabel="Tutar" Style="text-align:right">@(Helper.FormattedDouble(context.Tutarmatrah))</MudTd>
        <MudTd DataLabel="Döviz">@context.Dovizdokuid</MudTd>
        <MudTd DataLabel="Proje Adı">@context.Proje</MudTd>
        <MudTd DataLabel="Satış Temsilcisi">@context.Temsilciadi</MudTd>
        <MudTd DataLabel="Teslim Tarihi">@context.TeslimTarihiFormatted</MudTd>
        <MudTd DataLabel="Açıklama">@context.Aciklama1</MudTd>
        <MudTd DataLabel="Kaydı Giren">@context.Insuser</MudTd>
        <MudTd>
            @if (menuYetkiDto.Delete)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" OnClick="(() => Sil(context.Logref))" Size="Size.Small" />
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>
</MudTable>


@code {
    [Parameter]
    public string duruminfo { get; set; }

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    YetkiHelper yetkiHelper { get; set; }

    [Inject]
    DownloadHelper downloadHelper { get; set; }

    [Inject]
    TeklifHelper mainDataHelper { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();
    public MenuYetkiDto menuYetkiDto = new MenuYetkiDto();
    public List<TeklifDto> mainDataList { get; set; }
    public TeklifRequestDto mainDataRequest = new TeklifRequestDto();

    private string formName = "stek_listef";
    private string insertPage = "stek_listef_ekle";
    private string updatePage = "stek_listef_detay";
    private string headerText = "Teklif Listesi";
    private bool loadingCompleted { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            header.HeaderText = headerText;

            menuYetkiDto = await yetkiHelper.GetKullaniciMenuYetkisi(this.formName);

            await NewDataRequest();
            await LoadList();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

    private async Task NewDataRequest()
    {
        var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

        if (selectedFirmaDonem == null)
            throw new Exception("Firma Dönem Seçili değil");

        mainDataRequest.FirmaId = selectedFirmaDonem.firma_no.Value;
        mainDataRequest.kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
        mainDataRequest.TopRowCount = 100;
        mainDataRequest.Duruminfo = duruminfo;
        if (!string.IsNullOrWhiteSpace(duruminfo))
            mainDataRequest.insuser = mainDataRequest.kullanicikodu;
    }

    private async Task LoadList()
    {
        if (menuYetkiDto.View == false)
        {
            loadingCompleted = true;
            throw new Exception("Bu sayfayı görme yetkiniz yok");
        }

        mainDataList = await mainDataHelper.LoadRecords(mainDataRequest);
        loadingCompleted = true;
    }

    public void TeklifDetay(int logref)
    {
        navigation.NavigateTo("/" + updatePage + "/" + logref.ToString());
    }

    public void TeklifDetayIncele(int logref)
    {
        navigation.NavigateTo("/" + updatePage + "/" + logref.ToString()+ "/1");
    }

    public void YeniTeklif()
    {
        navigation.NavigateTo("/" + insertPage);
    }

    private async Task BtnAraClick()
    {
        mainDataRequest.SearchText = header.SearchText;
        mainDataRequest.TopRowCount = 0;
        loadingCompleted = false;
        this.StateHasChanged();
        await LoadList();
        if (mainDataList == null || mainDataList.Count == 0)
            Snackbar.Add("Aradığınız kriterlere uygun kayıt bulunamadı.", severity: Severity.Warning);
    }

    private async Task BtnDetayliAraClick()
    {
        try
        {
            var opt = new ModalOptions();
            
            modalParameters = new ModalParameters();
            modalParameters.Add("mainRequest", mainDataRequest);

            var filterForm = modal.Show<Components.Teklif.TeklifDetayliAraComponent>("Detaylı Arama", modalParameters, opt);
            var result = await filterForm.Result;

            if (!result.Cancelled)
            {
                if (result.Data != null)
                {
                    mainDataRequest = (TeklifRequestDto)result.Data;
                    mainDataRequest.SearchText = header.SearchText;
                    mainDataRequest.TopRowCount = 0;
                    loadingCompleted = false;
                    this.StateHasChanged();
                    await LoadList();
                    if (mainDataList == null || mainDataList.Count == 0)
                        Snackbar.Add("Aradığınız kriterlere uygun kayıt bulunamadı.", severity: Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Beklenmedik bir hata oluştu. Hata Mesajı:" + ex.Message, severity: Severity.Error);
        }

    }

    public async Task Sil(int logref)
    {
        try
        {
            var modalRes = await ModalManager.ShowConfirmationAsync("Teklif silinecek!", "Silmek istediğinizden emin misiniz?", "Evet", "Hayır");
            if (!modalRes)
                return;

            if (menuYetkiDto.Delete == false)
                throw new Exception("Silme yetkiniz bulunmamaktadır");

            loadingCompleted = false;

            var recordDto = await mainDataHelper.LoadRecord(logref);

            await mainDataHelper.DeleteRecord(recordDto);

            Snackbar.Add("Teklif silindi");

            await LoadList();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

    public async Task TeklifDurumDegistir(int logref, int? admin)
    {
        var opt = new ModalOptions();
        
        var parameters = new ModalParameters();
        parameters.Add("logRef", logref);

        if (admin.HasValue)
            parameters.Add("admin", admin.Value);

        var teklifDurumForm = modal.Show<TeklifDurumDegistirComponent>("Durum Değiştir", parameters: parameters, options: opt);
        var result = await teklifDurumForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var durumSecim = (TeklifDto)result.Data;
                if (durumSecim.Duruminfo.Equals(TeklifDurum.TeklifRevizyonda))
                    navigation.NavigateTo("/stek_listef_detay/" + durumSecim.Logref);
                else
                    await LoadList();
            } else
            {
                await LoadList();
            }
        }
    }

    public async Task TeklifDurumDetay(int logref)
    {
        var opt = new ModalOptions();
        
        var parameters = new ModalParameters();
        parameters.Add("teklifref", logref);

        var teklifDurumForm = modal.Show<TeklifDurumDetayComponent>("Teklif Durum Geçmişi", parameters: parameters, options: opt);
        var result = await teklifDurumForm.Result;

        if (!result.Cancelled)
        {
        }
    }

    public async Task TeklifKopyalaRevizeEt(TeklifDto teklif)
    {
        var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

        if (selectedFirmaDonem == null)
            throw new Exception("Firma Dönem Seçili değil");

        try
        {
            loadingCompleted = false;

            teklif.Lfirma = selectedFirmaDonem.logo_firma.Value.ToString();
            var request = new TeklifRequestDto();
            request.Teklif = teklif;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;
            request.kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            var result = await httpClient.PostAsJsonAsync(UrlHelper.TeklifKaydetRevize, request);

            var response = await result.Content.ReadFromJsonAsync<ServiceResponse<TeklifDto>>();
            if (!response.Success)
                throw new Exception(response.Message);

            //var result = await httpClient.PostGetServiceResponseAsync<TeklifDto, TeklifRequestDto>(UrlHelper.TeklifKaydetRevize, request);

            navigation.NavigateTo("/stek_listef_detay/" + response.Value.Logref);

        }
        catch (ApiException exx)
        {
            Snackbar.Add(exx.Message, severity: Severity.Warning);
            return;
        }
        catch (ClientException e)
        {
            foreach (var item in e.ErrorList)
            {
                Snackbar.Add(item, severity: Severity.Warning);
            }
            return;
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
        finally
        {
            loadingCompleted = true;
        }
    }

    public async Task DownloadCsv()
    {
        var content = @"Durum;Teklif No;Revize No;Tarih;Cari Kodu;Cari Adı;Tutar TL;Tutar;Döviz;Proje Adı;Satış Temsilcisi;Teslim Tarihi;Kaydı Giren
        ";

        foreach (var item in mainDataList)
        {
            content += item.Duruminfo + ";" + item.Teklifno + ";" + item.Revzno + ";" + item.TarihFormatted + ";"
                + item.Carikodu + ";" + item.Cariadi + ";" + Helper.FormattedDouble(item.Tutarmatrahtl) + ";" +
                Helper.FormattedDouble(item.Tutarmatrah) + ";" + item.Dovizdokuid +  ";" + item.Proje + ";" +
                item.Temsilciadi + ";" + item.TeslimTarihiFormatted + ";" + item.Insuser +
                Environment.NewLine;
        }
        await downloadHelper.DownloadCsv(content);
    }

}
