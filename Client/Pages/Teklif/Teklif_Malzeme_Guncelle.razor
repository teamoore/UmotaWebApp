@page "/stek_listef_detay/{logref:int}/{viewmode:int?}"
@using System.IO;
@inject IJSRuntime jsRuntime

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<div class="card" style="width: 100%;">
    <div class="card-body">
        <h5 class="card-title">Teklif Numarası : @teklif.Teklifno @teklif.Revzno</h5>

        <h6 class="card-subtitle mb-2 text-muted">
            Teklif Tarihi : @(teklif.Tarih.HasValue ? teklif.Tarih.Value.ToString("dd.MM.yyyy") : "")
            / Teslim Tarihi : @(teklif.TeslimTarihi.HasValue ? teklif.TeslimTarihi.Value.ToString("dd.MM.yyyy") : "")
        </h6>

        <div class="row">
            <div class="col-md-4">

                <MudSimpleTable Dense="true" Hover="false" Bordered="false" Loading="@(loadingCompleted == false)" Striped="false" Style="overflow-x: auto;">
                    <tbody>
                        <tr>
                            <td>Firma</td>
                            <td>@teklif.Cariadi</td>
                        </tr>
                        <tr>
                            <td>İlgili Kişi</td>
                            <td>@teklif.IlgiliAdi (@teklif.Mail)</td>
                        </tr>
                        <tr>
                            <td>Proje Adı</td>
                            <td>@teklif.Proje</td>
                        </tr>
                        <tr>
                            <td>Açıklama</td>
                            <td>@teklif.Aciklama1</td>
                        </tr>
                    </tbody>
                </MudSimpleTable>

            </div>

            <div class="col-md-4">

                <MudSimpleTable Dense="true" Hover="false" Loading="@(loadingCompleted == false)" Bordered="false" Striped="false" Style="overflow-x: auto;">
                    <tbody>
                        <tr>
                            <td>Teklif Tutar TL</td>
                            <td style="text-align:right">@(Helper.FormattedDouble(teklif.Tutarmatrahtl)) TL</td>
                        </tr>
                        <tr>
                            <td>Teklif Tutar</td>
                            <td style="text-align:right">@(Helper.FormattedDouble(teklif.Tutarmatrah)) @(teklif.Dovizdokuid)</td>
                        </tr>

                        @if (maliyetGorYonetici)
                        {
                            <tr>
                                <td>Maliyet 1 Toplam</td>
                                <td style="text-align:right">@(Helper.FormattedDouble(this.teklifDetayList.Sum(x => x.Miktar * x.Maliyet1id))) @teklif.Dovizdokuid</td>
                            </tr>
                        }

                        @if (maliyetGorSatisci)
                        {
                            <tr>
                                <td>Maliyet 2 Toplam</td>
                                <td style="text-align:right">@(Helper.FormattedDouble(this.teklifDetayList.Sum(x => x.Miktar * x.Maliyet2id))) @teklif.Dovizdokuid</td>
                            </tr>
                        }

                    </tbody>
                </MudSimpleTable>

            </div>

            <div class="col-md-4">

                <MudSimpleTable Dense="true" Hover="false" Loading="@(loadingCompleted == false)" Bordered="false" Striped="false" Style="overflow-x: auto;">
                    <tbody>
                        <tr>
                            <td>Teklif Para Birimi / Kuru</td>
                            <td style="text-align:right">@(teklif.Dovizdokuid) / @(teklif.Dovizkuruid)</td>
                        </tr>
                        <tr>
                            <td>Satış Temsilcisi</td>
                            <td style="text-align:right">@teklif.Temsilciadi</td>
                        </tr>
                        <tr>
                            <td>Teklif Durumu</td>
                            <td style="text-align:right">@teklif.Duruminfo</td>
                        </tr>
                        <tr>
                            <td>Satır Sayısı</td>
                            <td style="text-align:right">@(_miktar.HasValue ? _miktar.Value : 0)</td>
                        </tr>
                    </tbody>
                </MudSimpleTable>

            </div>

        </div>
        <hr />
        <div class="row">
            <div class="col-md-12">
                @if (!@inceleModu)
                {
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Edit" OnClick="Duzenle" Color="Color.Primary">Teklif Düzenle</MudButton>
                }
                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Print" OnClick="SayfayiYazdir" Color="Color.Primary">Sayfayı Yazdır</MudButton>

                <MudButtonGroup Color="Color.Primary">
                    <MudButton Disabled="_pdfDisabled">@_pdfButtonText</MudButton>
                    <MudMenu Icon="@Icons.Material.Filled.PictureAsPdf" Disabled="_pdfDisabled" LockScroll="_pdfDisabled">
                        <MudMenuItem OnClick="() => PdfOlustur(0)">İskontolu</MudMenuItem>
                        <MudMenuItem OnClick="() => PdfOlustur(1)">Net</MudMenuItem>
                        <MudMenuItem OnClick="() => PdfOlustur(2)">Net + KDV</MudMenuItem>
                    </MudMenu>
                </MudButtonGroup>

                @if (_pdfDisabled && _showDownloadPdf)
                {
                    <a href="@_pdfPath" class="btn btn-outline-success" role="button" download="teklif">Dosyayı indir</a>
                    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AttachEmail" OnClick="PdfGonder" Color="Color.Secondary" Disabled="@_sendEmailDisabled">@_sendEmailText</MudButton>
                }

                <MudButtonGroup Color="Color.Secondary">
                    <MudButton>Durum</MudButton>
                    <MudMenu Icon="@Icons.Material.Filled.Update">
                        <MudMenuItem OnClick="() => TeklifDurumDegistir(logref,null)">Durum Değiştir</MudMenuItem>
                        @if (isAdmin)
                        {
                            <MudMenuItem OnClick="() => TeklifDurumDegistir(logref, 1)">Durum Değiştir (Admin)</MudMenuItem>
                        }
                        <MudMenuItem OnClick="() => TeklifDurumDetay(logref)">Durum Geçmişi</MudMenuItem>
                    </MudMenu>
                </MudButtonGroup>
            </div>
        </div>


    </div>
</div>



<MudTable Items="@teklifDetayList" FixedHeader="true" Height="280px" RowsPerPage="1000" Dense="true" Hover="true" Loading="@(loadingCompleted == false)" Bordered="true" Striped="true" Filter="new Func<TeklifDetayDto,bool>(FilterFunc1)">
    <ToolBarContent>
        @if (!@inceleModu)
        {
            <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="TeklifDetayEkle" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
        }
        &nbsp;
        <MudIconButton Icon="@Icons.Material.Filled.FileDownload" OnClick="DownloadCsv" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
        <MudSpacer />
        <MudText Typo="Typo.h6">Teklif Satırları</MudText>
        <MudSpacer />
        <MudTextField @bind-Value="_searchString" Placeholder="Satırlarda Ara" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
    <HeaderContent>
        @if (!@inceleModu)
        {
            <MudTh>#</MudTh>
        }
        <MudTh>Poz No</MudTh>
        <MudTh>Mahal</MudTh>
        <MudTh>Stok Kodu</MudTh>
        <MudTh>Stok Adı</MudTh>
        <MudTh>Marka</MudTh>
        <MudTh>Miktar</MudTh>
        <MudTh>Birim</MudTh>
        <MudTh>Net Fiyat</MudTh>
        <MudTh>Tutar</MudTh>
        @if (@maliyetGorYonetici)
        {
            <MudTh>Maliyet 1 Toplam </MudTh>
        }
        @if (@maliyetGorSatisci)
        {
            <MudTh>Maliyet 2 Toplam </MudTh>
        }
        <MudTh>İsk-1 %</MudTh>
        <MudTh>İsk-2 %</MudTh>
        <MudTh>İsk-3 %</MudTh>
        <MudTh>Genel %</MudTh>
        @if (!@inceleModu)
        {
            <MudTh>#</MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        @if (!@inceleModu)
        {
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" @onclick="(() => TeklifDetayGuncelle(context.Logref))" />
            </MudTd>
        }
        <MudTd DataLabel="Poz No">@context.Sipnosira</MudTd>
        <MudTd DataLabel="Mahal">@context.Mahal</MudTd>
        <MudTd DataLabel="Stok Kodu">@context.Malzkodu</MudTd>
        <MudTd DataLabel="Stok Adı">@context.Malzadi</MudTd>
        <MudTd DataLabel="Marka">@context.Marka</MudTd>
        <MudTd DataLabel="Miktar">@context.Miktar</MudTd>
        <MudTd DataLabel="Birim">@context.Birimkodu</MudTd>
        <MudTd DataLabel="Net Fiyat" Style="text-align:right">@(Helper.FormattedDouble(context.NetFiyatid.Value))</MudTd>
        <MudTd DataLabel="Tutar" Style="text-align:right">@(Helper.FormattedDouble(context.Kdvmatrahid))</MudTd>
        @if (@maliyetGorYonetici)
        {
            <MudTd DataLabel="Maliyet 1 Toplam" Style="text-align:right">@(Helper.FormattedDouble(context.Maliyet1id * context.Miktar))</MudTd>
        }
        @if (@maliyetGorSatisci)
        {
            <MudTd DataLabel="Maliyet 2 Toplam" Style="text-align:right">@(Helper.FormattedDouble(context.Maliyet2id * context.Miktar))</MudTd>
        }
        <MudTd DataLabel="İsk-1 %">@(Helper.FormattedDouble(context.Iskyuz1))</MudTd>
        <MudTd DataLabel="İsk-2 %">@(Helper.FormattedDouble(context.Iskyuz2))</MudTd>
        <MudTd DataLabel="İsk-3 %">@(Helper.FormattedDouble(context.Iskyuz3))</MudTd>
        <MudTd DataLabel="Genel %">@(Helper.FormattedDouble(context.Iskyuz4))</MudTd>
        @if (!@inceleModu)
        {
            <MudTd>
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" @onclick="(() => DeleteTeklifDetay(context.Logref))" />
            </MudTd>
        }
    </RowTemplate>

    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>

</MudTable>




@code {
    [Parameter]
    public int logref { get; set; }
    [Parameter]
    public int? viewmode { get; set; }

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }


    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    DownloadHelper downloadHelper { get; set; }

    public TeklifDto teklif = new TeklifDto();

    public List<TeklifDetayDto> teklifDetayList { get; set; }

    private bool isAdmin = false;
    private bool inceleModu = false;
    private bool maliyetGorYonetici = false;
    private bool maliyetGorSatisci = false;

    private string _searchString = "";
    private bool _sortNameByLength;

    private double? _miktar = 0;

    private bool _pdfDisabled = false;
    private string _pdfButtonText = "Pdf Oluştur";
    private bool _showDownloadPdf = false;
    private string _pdfPath = "";
    private SharedEnums.TeklifPdfType selectedPdfType;

    private bool _sendEmailDisabled = false;
    private string _sendEmailText = "Gönder";

    private bool loadingCompleted = false;

    private bool FilterFunc1(TeklifDetayDto element) => FilterFunc(element, _searchString);

    private bool FilterFunc(TeklifDetayDto element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.LstokAdi != null && element.LstokAdi.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.LstokKodu != null && element.LstokKodu.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Marka != null && element.Marka.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;

        return false;
    }

    protected override async Task OnInitializedAsync()
    {
        if (viewmode != null && viewmode == 1)
            inceleModu = true;
        await LoadTeklifData();
        await LoadTeklifDetayData();
        await KullaniciYetkileriGetir();
        loadingCompleted = true;
    }

    private async Task LoadTeklifDetayData()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            var result = await httpClient.GetServiceResponseAsync<List<TeklifDetayDto>>("/api/teklifdetay/list?teklifRef=" + logref + "&firmaId=" + selectedFirmaDonem.firma_no.Value);
            if (result != null)
            {
                teklifDetayList = result.OrderBy(x => x.Sipnosira).ToList();
                _miktar = teklifDetayList.Count();
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    private async Task LoadTeklifData()
    {
        try
        {
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            if (selectedFirmaDonem == null)
                throw new Exception("Firma Dönem Seçili değil");

            var result = await httpClient.GetServiceResponseAsync<TeklifDto>(UrlHelper.TeklifGetir + "?logref=" + logref + "&firmaId=" + selectedFirmaDonem.firma_no);
            if (result != null)
            {
                teklif = result;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public void Duzenle()
    {
        navigation.NavigateTo("/stek_listef_guncelle/" + logref);
    }

    private async Task Kapat()
    {
        await ModalInstance.CloseAsync();
    }

    public void TeklifDetayEkle()
    {
        try
        {
            navigation.NavigateTo("/teklifdetay_ekle/" + logref);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public void TeklifDetayGuncelle(int logref)
    {
        try
        {
            navigation.NavigateTo("/teklifdetay_guncelle/" + logref);

        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, Severity.Error);
        }
    }

    public async Task DeleteTeklifDetay(int logref)
    {
        try
        {
            var modalRes = await ModalManager.ShowConfirmationAsync("Teklif Detay Silinecek!", "Teklif Detayını silmek istediğinizden emin misiniz?", "Evet", "Hayır");
            if (!modalRes)
                return;

            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
            var kullanici = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);


            var delete = await httpClient.GetFromJsonAsync<ServiceResponse<bool>>("/api/teklifdetay/delete?logref=" + logref + "&firmaId=" + selectedFirmaDonem.firma_no.Value + "&kullanici=" + kullanici);

            if (delete.Success == false)
                throw new Exception(delete.Message);

            Snackbar.Add("Teklif detayı silindi");

            await LoadTeklifDetayData();
            await LoadTeklifData();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

    private async Task SayfayiYazdir()
    {
        await jsRuntime.InvokeVoidAsync("printPage");
    }

    public async Task KullaniciYetkileriGetir()
    {
        try
        {
            var kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            var resultkul = await httpClient.GetServiceResponseAsync<SisKullaniciDto>(UrlHelper.KullaniciGetByKod + "?kod=" + kullanicikodu);

            if (resultkul != null)
            {
                isAdmin = resultkul.KullaniciYetkiKodu.Equals("ADM");
            }

            if (!isAdmin)
            {
                var result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.GetKullaniciYetkisi + "?kullanicikodu=" + kullanicikodu + "&yetkikodu=" + KullaniciYetkiKodlari.TeklifteMaliyet1GorebilsinYoNETiCi);

                maliyetGorYonetici = result == 1;

                if (!maliyetGorYonetici)
                {
                    result = await httpClient.GetServiceResponseAsync<int>(UrlHelper.GetKullaniciYetkisi + "?kullanicikodu=" + kullanicikodu + "&yetkikodu=" + KullaniciYetkiKodlari.TeklifteMaliyet2GorebilsinPersonel);

                    maliyetGorSatisci = result == 1;

                } else
                {
                    maliyetGorSatisci = true;
                }

            } else
            {
                maliyetGorYonetici = true;
                maliyetGorSatisci = true;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

    private async Task PdfOlustur(int type)
    {
        try
        {
            var kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            _pdfDisabled = true;
            _pdfButtonText = "Pdf Oluşturuluyor...";

            var request = new PdfGeneratorRequestDto();
            request.teklif = this.teklif;
            request.teklifDetays = this.teklifDetayList;
            selectedPdfType = (SharedEnums.TeklifPdfType)type;
            request.PdfType = (SharedEnums.TeklifPdfType)type;
            request.Kullanici = kullanicikodu;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            var result = await httpClient.PostAsJsonAsync<PdfGeneratorRequestDto>("/api/Pdf/CreateTeklifPdfDocument", request);
            var response = await result.Content.ReadFromJsonAsync<ServiceResponse<PdfGenerateResponseDto>>();

            if (response.Success)
            {
                _pdfButtonText = "PDF Oluşturuldu";
                Snackbar.Add(string.Format("Pdf oluşturuldu",
                    this.teklif.Mail), severity: Severity.Success);

                _pdfPath = navigation.ToAbsoluteUri("/Media/Files/Files/" + response.Value.PdfPath).ToString();
                _showDownloadPdf = true;
            }
            else
            {
                Snackbar.Add(response.Message, severity: Severity.Warning);
            }

        }
        catch (Exception ex)
        {
            _pdfDisabled = false;
            _pdfButtonText = "Pdf Oluştur ve Gönder";
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    private async Task PdfGonder()
    {
        try
        {
            var kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
            var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

            _pdfDisabled = true;
            _sendEmailDisabled = true;
            _sendEmailText = "Gönderiliyor...";

            var request = new PdfGeneratorRequestDto();
            request.teklif = this.teklif;
            request.teklifDetays = this.teklifDetayList;
            request.PdfType = selectedPdfType;
            request.Kullanici = kullanicikodu;
            request.FirmaId = selectedFirmaDonem.firma_no.Value;

            var result = await httpClient.PostAsJsonAsync<PdfGeneratorRequestDto>("/api/Pdf/CreateTeklifPdfDocumentSendMail", request);
            var response = await result.Content.ReadFromJsonAsync<ServiceResponse<PdfGenerateResponseDto>>();

            if (response.Success)
            {

                Snackbar.Add(string.Format("Teklif {0} adresine gönderildi",
                    this.teklif.Mail), severity: Severity.Success);
                _sendEmailText = "Gönderildi";
                await LoadTeklifData();
            }
            else
            {
                Snackbar.Add(response.Message, severity: Severity.Warning);
            }

        }
        catch (Exception ex)
        {
            _pdfDisabled = false;
            _pdfButtonText = "Pdf Oluştur ve Gönder";
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    public async Task TeklifDurumDegistir(int logref, int? admin)
    {
        var opt = new ModalOptions();
        
        var parameters = new ModalParameters();
        parameters.Add("logRef", logref);

        if (admin.HasValue)
            parameters.Add("admin", admin.Value);

        var teklifDurumForm = modal.Show<TeklifDurumDegistirComponent>("Durum Değiştir", parameters: parameters, options: opt);
        var result = await teklifDurumForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var durumSecim = (TeklifDto)result.Data;
                if (durumSecim.Duruminfo.Equals(TeklifDurum.TeklifRevizyonda))
                {
                    this.loadingCompleted = false;
                    this.StateHasChanged();

                    this.logref = durumSecim.Logref;
                    await LoadTeklifData();
                    await LoadTeklifDetayData();
                    this.loadingCompleted = true;
                }
                else
                    await LoadTeklifData();
            }
            else
            {
                await LoadTeklifData();
            }
        }
    }

    public async Task TeklifDurumDetay(int logref)
    {
        var opt = new ModalOptions();
        
        var parameters = new ModalParameters();
        parameters.Add("teklifref", logref);

        var teklifDurumForm = modal.Show<TeklifDurumDetayComponent>("Teklif Durum Geçmişi", parameters: parameters, options: opt);
        var result = await teklifDurumForm.Result;

        if (!result.Cancelled)
        {
        }
    }

    public async Task DownloadCsv()
    {
        var content = @"Poz No;Mahal;Stok Kodu;Stok Adı;Marka;Menşei;Miktar;Birim;Net Fiyat;Tutar";

        @if (@maliyetGorYonetici)
        {
            content += @";Maliyet 1 Toplam";
        }
        @if (@maliyetGorSatisci)
        {
            content += @";Maliyet 2 Toplam";
        }

        content += @";İsk-1 %;İsk-2 %;İsk-3 %;Genel %";
        content += Environment.NewLine;

        foreach (var item in teklifDetayList)
        {
            content += item.Sipnosira + ";" + item.Mahal + ";" + item.Malzkodu + ";" + item.Malzadi + ";" + item.Marka + ";" + item.Mensei + ";" + item.Miktar + ";"
                + item.Birimkodu + ";" + Helper.FormattedDouble(item.NetFiyatid) + ";" + Helper.FormattedDouble(item.Kdvmatrahid) + ";";

            @if(@maliyetGorYonetici)
            {
                content += Helper.FormattedDouble(item.Maliyet1id * item.Miktar) + ";";
            }

            @if(maliyetGorSatisci)
            {
                content += Helper.FormattedDouble(item.Maliyet2id * item.Miktar) + ";";
            }

            content += Helper.FormattedDouble(item.Iskyuz1) + ";" + Helper.FormattedDouble(item.Iskyuz2) + ";" + Helper.FormattedDouble(item.Iskyuz3) + ";" + Helper.FormattedDouble(item.Iskyuz4) + ";";
            content += Environment.NewLine;
        }
        await downloadHelper.DownloadCsv(content);
    }
}
