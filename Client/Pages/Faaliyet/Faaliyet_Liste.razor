@page "/faaliyet_listef"

<HeaderSearchBar header="header"
                 ShowButtons="false" ShowFilterButton="true" ShowSearchSection="true"
                 onDoneButtonClicked="BtnAraClick" onFilterButtonClicked="BtnDetayliAraClick"></HeaderSearchBar>

@if (loadingCompleted == false)
{
    <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

@if (menuYetkiDto.View == false)
{
    <MudAlert Severity="Severity.Error" Variant="Variant.Filled">Bu sayfayı görüntüleme yetkiniz yok</MudAlert>
}

<MudTable Items="@mainDataList" FixedHeader="true" Height="500px" Dense="true" Hover="true" RowsPerPage="100" Bordered="true" Striped="true">
    <ToolBarContent>
        @if (menuYetkiDto.Insert)
        {
            <MudIconButton Icon="@Icons.Material.Filled.NoteAdd" OnClick="YeniKayitEkle" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Medium" />
        }
    </ToolBarContent>
    <HeaderContent>
        <MudTh>#</MudTh>
        <MudTh>Faaliyet Türü</MudTh>
        <MudTh>Tarih</MudTh>
        <MudTh>Kaydı Giren</MudTh>
        <MudTh>Kayıt Tarihi</MudTh>
        <MudTh>Konu</MudTh>
        <MudTh>Cari Adı</MudTh>
        <MudTh>İlgili Kişi</MudTh>
        <MudTh>İlçe</MudTh>
        <MudTh>İl</MudTh>
        <MudTh>Ürün Grubu</MudTh>
        <MudTh>Yapılanlar</MudTh>
        <MudTh>#</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd>
            @if (menuYetkiDto.Update)
            {
                <MudIconButton Icon="@Icons.TwoTone.Edit" Variant="Variant.Outlined" Color="Color.Primary" OnClick="(() => Degistir(context.Logref))" Size="Size.Medium" />
            }
        </MudTd>
        <MudTd DataLabel="Faaliyet Türü">@(context.Islemturu == 0 ? "Planlanan" : "Gerçekleşen")</MudTd>
        <MudTd DataLabel="Tarih">@context.Tarih</MudTd>
        <MudTd DataLabel="Giren">@context.Giren</MudTd>
        <MudTd DataLabel="Kayıt Tarihi">@context.Insdate</MudTd>
        <MudTd DataLabel="Konu">@context.Konu @((context.IslemSayisi != null && context.IslemSayisi > 0) ? "("+context.IslemSayisi+ ")" : "") </MudTd>
        <MudTd DataLabel="Cari Adı">@context.Cariadi</MudTd>
        <MudTd DataLabel="İlgili Kişi">@context.Kisiadi</MudTd>
        <MudTd DataLabel="İlçe">@context.Ilce</MudTd>
        <MudTd DataLabel="il">@context.Il</MudTd>
        <MudTd DataLabel="Ürün Grubu">@context.Grup1</MudTd>
        <MudTd DataLabel="Yapılanlar">

            <MudTooltip Text="@context.Yapilanlar" Arrow="true" Placement="Placement.Top">
                @context.Yapilanlar.MinimizeString(50)
            </MudTooltip>
        </MudTd>
        <MudTd>
            @if (menuYetkiDto.Delete)
            {
                <MudIconButton Icon="@Icons.Material.Filled.Delete" Variant="Variant.Outlined" Color="Color.Error" OnClick="(() => Sil(context.Logref))" Size="Size.Small" />
            }
        </MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
    </PagerContent>
</MudTable>


@code {

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
    [CascadingParameter] ModalParameters modalParameters { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    HttpClient httpClient { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    YetkiHelper yetkiHelper { get; set; }

    [Inject]
    FaaliyetHelper mainDataHelper { get; set; }

    public HeaderBarSearch header = new HeaderBarSearch();
    public MenuYetkiDto menuYetkiDto = new MenuYetkiDto();
    public List<FaaliyetDto> mainDataList { get; set; }
    public FaaliyetRequestDto mainDataRequest = new FaaliyetRequestDto();

    private string formName = "faaliyet_listef";
    private string insertPage = "faaliyet_listef_ekle";
    private string updatePage = "faaliyet_listef_guncelle";
    private string headerText = "Faaliyet Listesi";
    private bool loadingCompleted = false;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            header.HeaderText = headerText;

            menuYetkiDto = await yetkiHelper.GetKullaniciMenuYetkisi(this.formName);

            await NewDataRequest();
            await LoadList();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

    private async Task NewDataRequest()
    {
        var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);

        if (selectedFirmaDonem == null)
            throw new Exception("Firma Dönem Seçili değil");

        mainDataRequest.FirmaId = selectedFirmaDonem.firma_no.Value;
        mainDataRequest.kullanicikodu = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);
        mainDataRequest.TopRowCount = 100;
    }

    private async Task LoadList()
    {
        if (menuYetkiDto.View == false)
        {
            loadingCompleted = true;
            throw new Exception("Bu sayfayı görme yetkiniz yok");
        }

        mainDataList = await mainDataHelper.LoadRecords(mainDataRequest);
        loadingCompleted = true;
    }

    public void YeniKayitEkle()
    {
        navigation.NavigateTo("/" + insertPage);
    }

    public void Degistir(int logref)
    {
        navigation.NavigateTo("/" + updatePage + "/" + logref.ToString());
    }

    public async Task Sil(int logref)
    {
        try
        {
            var modalRes = await ModalManager.ShowConfirmationAsync("Faaliyet silinecek!", "Silmek istediğinizden emin misiniz?", "Evet", "Hayır");
            if (!modalRes)
                return;

            if (menuYetkiDto.Delete == false)
                throw new Exception("Silme yetkiniz bulunmamaktadır");

            loadingCompleted = false;

            var recordDto = await mainDataHelper.LoadRecord(logref);

            await mainDataHelper.DeleteRecord(recordDto);

            Snackbar.Add("Faaliyet silindi");

            await LoadList();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Warning);
        }
    }

    private async Task BtnAraClick()
    {
        mainDataRequest.SearchText = header.SearchText;
        mainDataRequest.TopRowCount = 0;
        loadingCompleted = false;
        this.StateHasChanged();
        await LoadList();
        if (mainDataList == null || mainDataList.Count == 0)
            Snackbar.Add("Aradığınız kriterlere uygun kayıt bulunamadı.", severity: Severity.Warning);
    }

    private async Task BtnDetayliAraClick()
    {
        try
        {
            var opt = new ModalOptions();
            
            modalParameters = new ModalParameters();
            modalParameters.Add("mainRequest", mainDataRequest);

            var filterForm = modal.Show<Components.Faaliyet.FaaliyetDetayliAraComponent>("Detaylı Arama", modalParameters, opt);
            var result = await filterForm.Result;

            if (!result.Cancelled)
            {
                if (result.Data != null)
                {
                    mainDataRequest = (FaaliyetRequestDto)result.Data;
                    mainDataRequest.SearchText = header.SearchText;
                    mainDataRequest.TopRowCount = 0;
                    loadingCompleted = false;
                    this.StateHasChanged();
                    await LoadList();
                    if (mainDataList == null || mainDataList.Count == 0)
                        Snackbar.Add("Aradığınız kriterlere uygun kayıt bulunamadı.", severity: Severity.Warning);
                }
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add("Beklenmedik bir hata oluştu. Hata Mesajı:" + ex.Message, severity: Severity.Error);
        }
    }


}
