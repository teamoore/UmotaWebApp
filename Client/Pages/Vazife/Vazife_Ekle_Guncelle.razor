@page "/vazife_ekle_guncelle/{vazifeLogRef:int}"
@page "/vazife_ekle_guncelle"

<HeaderSearchBar header="header"
                 ShowButtons="false" ShowFilterButton="false"
                 ShowSearchSection="false"></HeaderSearchBar>


<EditForm Model="record">

    @if (loadingCompleted == false)
    {
        <MudProgressLinear Color="Color.Primary" Striped="true" Size="Size.Large" Indeterminate="true" Class="my-7" />
    }

    <div class="mt-5">
        <div class="form">

            <div class="form-group">
                <div class="row">
                    <div class="col-md-3">
                        <label>Görev Tipi</label>
                        <select class="form-control" @bind="record.VazifeTipi">
                            <option value="-1">Seçiniz</option>
                            <option value="Görev">Görev</option>
                            <option value="Arama">Arama</option>
                        </select>
                    </div>
                </div>
            </div>
            <div class="form-group">
                <div class="row">
                    <div class="col-md-3">
                        <label>Görev Tarihi</label>
                        <InputDate @bind-Value="record.SonTarih" class="form-control"></InputDate>
                    </div>
                    <div class="col-md-2">
                        <MudTimePicker Label="Saat" Editable="true" @bind-Time="record.SonTarihSaat" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-8">
                        <label>Cari Bilgileri</label>
                        <div class="row">
                            <div class="col">
                                <InputText @bind-Value="record.CariKodu" class="form-control" placeholder="Cari Kodu" disabled />
                            </div>
                            <div class="col">
                                <InputText @bind-Value="record.CariAdi" class="form-control" placeholder="Cari Adı" disabled />
                            </div>
                            <div class="col">
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.FindInPage" OnClick="CariListesiAc" Color="Color.Info" Size=Size.Small>Bul</MudButton>
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.AddCard" OnClick="YeniCariEkle" Color="Color.Info" Size=Size.Small>Yeni Cari</MudButton>

                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-8">
                        <label>İlgili Kişi</label>
                        <div class="row">
                            <div class="col">

                                <InputSelect @bind-Value="record.KisiRef" class="form-control">
                                    @if (KisiListesi != null)
                                    {
                                        <option value="-1">@Utils.Mesajlar.Seciniz</option>
                                        @foreach (var item in KisiListesi)
                                        {
                                            <option value="@item.Logref">@item.Tamadi</option>
                                        }
                                    }
                                </InputSelect>
                            </div>
                            <div class="col">
                                <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.PersonAdd" OnClick="YeniKisiEkle" Color="Color.Info" Size=Size.Small>Yeni Kişi</MudButton>

                            </div>
                        </div>

                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-8">
                        <label>Başlık</label>
                        <InputText @bind-Value="record.Baslik" class="form-control"></InputText>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-8">
                        <label>Açıklama</label>
                        <InputTextArea rows="5" @bind-Value="record.Aciklama" class="form-control"></InputTextArea>
                    </div>
                </div>

            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <label>Atanacak Kişi</label>
                        <select class="form-control" @bind="record.AtananKisi">
                            @if (kullanicilar != null)
                            {
                                <option value="-1">Seçiniz</option>
                                @foreach (var item in kullanicilar)
                                {
                                    <option value="@item.KullaniciKodu">@item.KullaniciKodu (@item.KullaniciAdi)</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="col-md-4">
                        <label>Önem Derecesi</label>
                        <select class="form-control" @bind="record.Oncelik">
                            <option value="-1">Seçiniz</option>
                            <option value="1">Rutin</option>
                            <option value="2">Önemli</option>
                            <option value="3">Acil</option>
                            <option value="4">Acil ve Önemli</option>
                        </select>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-4">
                        <MudSwitch @bind-Checked="record.YapildiMi" Label="Yapıldı" Color="Color.Success" />

                    </div>
                    <div class="col-md-4">
                        <MudSwitch @bind-Checked="record.ArsivMi" Label="Arşive Kaldır" Color="Color.Warning" />
                    </div>
                </div>
            </div>

            <div class="form-group">
                <div class="row">
                    <div class="col-md-8">
                        <label>Yapılanlar</label>
                        <InputTextArea rows="5" @bind-Value="record.Yapilanlar" class="form-control"></InputTextArea>
                    </div>
                </div>

            </div>

            <div class="form-group">
                <MudButton Disabled="@_processing" OnClick="ValidSubmit" Variant="Variant.Filled" Color="Color.Primary">
                    @if (_processing)
                    {
                        <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                        <MudText Class="ms-2">Kaydediliyor...</MudText>
                    }
                    else
                    {
                        <MudText>Kaydet</MudText>
                    }
                </MudButton>
                <CancelButtonComponent Caption="Vazgeç" OnClick="Vazgec" />
            </div>
        </div>
    </div>



</EditForm>


@code {

    [Parameter]
    public int? vazifeLogRef { get; set; }

    [Parameter]
    public int? vazifeTipi { get; set; }

    [Parameter]
    public int? modalForm { get; set; }

    [Parameter]
    public VazifeDto gorevParam { get; set; }

    [CascadingParameter] IModalService modal { get; set; }
    [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }

    [Inject]
    ILocalStorageService LocalStorageService { get; set; }

    [Inject]
    KullaniciHelper kullaniciHelper { get; set; }

    [Inject]
    ModalManager ModalManager { get; set; }

    [Inject]
    NavigationManager navigation { get; set; }

    [Inject]
    ISnackbar Snackbar { get; set; }

    [Inject]
    VazifeHelper dataHelper { get; set; }

    [Inject]
    KisiHelper kisiHelper { get; set; }

    [Inject]
    TakvimHelper takvimHelper { get; set; }

    public VazifeDto record = new VazifeDto();

    private bool loadingCompleted = false;
    private bool _processing = false;
    public HeaderBarSearch header = new HeaderBarSearch();
    public List<SisKullaniciDto> kullanicilar = new List<SisKullaniciDto>();
    public List<KisilerDto> KisiListesi { get; set; }
    public Dictionary<int, string> vazifeTipleri = new Dictionary<int, string>();
    private string _currentUser = "";

    private bool _pageHasError = false;

    public async Task ValidSubmit()
    {
        var isUpdate = this.vazifeLogRef.HasValue;

        if (!isUpdate)
            await SaveRecord();
        else
            await UpdateRecord();

        await SaveCompleted();
    }

    private async Task Vazgec()
    {
        await SaveCompleted();
    }

    private async Task SaveCompleted()
    {
        if (_pageHasError)
            return;

        if (modalForm.HasValue)
            await ModalInstance.CloseAsync();
        else
            navigation.NavigateTo("/vazife_listef");
    }

    public async Task LoadRecord()
    {
        try
        {
            this.record = await dataHelper.LoadRecord(this.vazifeLogRef.Value);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    private async Task SaveRecord()
    {
        try
        {
            SubmitValidation();
        }
        catch (ClientException ex)
        {
            foreach (var item in ex.ErrorList)
            {
                Snackbar.Add(item, severity: Severity.Warning);
            }
            return;
        }
        catch (Exception)
        {
        }

        try
        {
            _processing = true;

            await dataHelper.SaveRecord(record);

            //var takvim = new TakvimDto();
            //takvim.Baslik = record.Baslik;
            //takvim.Aciklama = record.Aciklama;
            //takvim.CariRef = record.CariRef;
            //takvim.Cari_Adi = record.CariAdi;
            //takvim.Cari_Kodu = record.CariKodu;
            //takvim.Tarih = record.SonTarih.HasValue ? record.SonTarih : DateTime.Now;

            //await takvimHelper.SaveRecord(takvim);

            Snackbar.Add("Kayıt eklendi.", severity: Severity.Success);

            this.StateHasChanged();
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    private async Task UpdateRecord()
    {
        try
        {
            SubmitValidation();
        }
        catch (ClientException ex)
        {
            foreach (var item in ex.ErrorList)
            {
                Snackbar.Add(item, severity: Severity.Warning);
            }
            return;
        }
        catch (Exception)
        {
        }

        try
        {
            _processing = true;

            record.Status = 1;
            record.Upddate = DateTime.Now;
            record.Upduser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

            await dataHelper.UpdateRecord(record);

            Snackbar.Add("Kayıt güncellendi", severity: Severity.Success);
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
        finally
        {
            _processing = false;
        }
    }

    public void SubmitValidation()
    {
        _pageHasError = false;

        var err = new List<string>();

        if (record.SonTarih == null)
            err.Add("Tarih boş geçilemez");

        if (string.IsNullOrWhiteSpace(record.Baslik))
            err.Add("Başlık boş geçilemez");

        if (record.Oncelik == -1)
            err.Add("Öncelik seçiniz");

        if (string.IsNullOrEmpty(record.VazifeTipi) || record.VazifeTipi.Equals("-1"))
            err.Add("Görevi tipini seçiniz");

        if (string.IsNullOrEmpty(record.AtananKisi) || record.AtananKisi.Equals("-1"))
            err.Add("Atanacak kişi boş geçilemez");

        if (string.IsNullOrEmpty(record.Yapilanlar) && record.YapildiMi)
            err.Add("Yapılanlar boş geçilemez");

        if (err.Count > 0)
        {
            _pageHasError = true;

            var ex = new ClientException("Kayıt Hatası");
            ex.ErrorList = err;

            throw ex;
        }
    }

    public void InitVazifeTipleri()
    {
        vazifeTipleri.Add(1, "Randevu");
        vazifeTipleri.Add(2, "Görev");
        vazifeTipleri.Add(3, "Arama");

    }

    protected override async Task OnInitializedAsync()
    {
        header.HeaderText = "Görev ve Yapılacaklar";

        var isUpdate = this.vazifeLogRef.HasValue;

        loadingCompleted = false;

        _currentUser = await LocalStorageService.GetItemAsync<string>(Consts.KullaniciKodu);

        InitVazifeTipleri();
        string pvt = "";

        if (this.vazifeTipi.HasValue)
        {
            vazifeTipleri.TryGetValue(this.vazifeTipi.Value, out pvt);
            record.VazifeTipi = pvt;
        }

        if (gorevParam != null)
        {
            this.record.CariAdi = gorevParam.CariAdi;
            this.record.CariKodu = gorevParam.CariKodu;
            this.record.CariRef = gorevParam.CariRef;
        }

        await LoadKullanicilar();

        this.record.Oncelik = 1; // düşük öncelik
        this.record.AtananKisi = _currentUser;
        if (isUpdate)
        {
            await LoadRecord();
        }

        await GetKisiListesi();

        loadingCompleted = true;
    }

    private async Task LoadKullanicilar()
    {
        try
        {
            kullanicilar = await kullaniciHelper.TumListe();
        }
        catch (Exception)
        {
        }
    }

    public async Task CariListesiAc()
    {
        var opt = new ModalOptions();
        
        var cariForm = modal.Show<Pages.Cari.Cari_Sec>("Cari Seç", opt);
        var result = await cariForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var cariSecim = (VCariKartDto)result.Data;
                record.CariAdi = cariSecim.Adi;
                record.CariKodu = cariSecim.Kodu;
                record.CariRef = cariSecim.Logref;
                await GetKisiListesi();
            }
        }
    }

    public async Task YeniCariEkle()
    {
        var opt = new ModalOptions();
        
        var parameters = new ModalParameters();
        parameters.Add("modalForm", 1);

        var cariForm = modal.Show<CariKartEkleGuncelleComponent>("Yeni Cari Ekle", parameters: parameters, options: opt);
        var result = await cariForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var cariSecim = (CariKartDto)result.Data;
                record.CariAdi = cariSecim.Adi;
                record.CariRef = cariSecim.Logref;
                KisiListesi = new List<KisilerDto>();
            }
        }
    }

    public async Task YeniKisiEkle()
    {
        if (!record.CariRef.HasValue)
            return;

        var opt = new ModalOptions();
        
        var parameters = new ModalParameters();
        parameters.Add("modalForm", 1);
        parameters.Add("CariKartRef", record.CariRef);

        var cariForm = modal.Show<CariKartKisiEkleGuncelleComponent>("Yeni Kişi Ekle", parameters: parameters, options: opt);
        var result = await cariForm.Result;

        if (!result.Cancelled)
        {
            if (result.Data != null)
            {
                var Secim = (KisilerDto)result.Data;
                if (KisiListesi == null)
                    KisiListesi = new List<KisilerDto>();

                KisiListesi.Add(Secim);
            }

        }
    }

    public async Task GetKisiListesi()
    {
        try
        {
            if (record.CariRef.HasValue == false)
                return;

            var result = await kisiHelper.LoadRecords(record.CariRef.Value);

            if (result != null)
            {
                KisiListesi = result;
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add(ex.Message, severity: Severity.Error);
        }
    }

    private bool isLoginUser(string username)
    {
        return username.Equals(_currentUser);
    }
}
