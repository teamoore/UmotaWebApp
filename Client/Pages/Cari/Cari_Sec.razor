@page "/cari_sec"

<div class="container">
    <EditForm Model="cari" OnValidSubmit="CariBul">
        <div class="form">

            <div class="form-group">

                <div class="row">
                    <div class="col-md-4">
                        <InputText @bind-Value="cari.SearchText" class="form-control" />
                    </div>
                    <div class="col-md-8">
                        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.FindInPage"
                                   OnClick="CariBul" Color="Color.Info" Size="Size.Medium">@ButonText</MudButton>
                            </div>
                        </div>

                    </div>

                </div>
            </EditForm>


            @if (string.IsNullOrEmpty(ResultText) == false)
            {
                <div class="alert alert-warning" role="alert">
                    @ResultText
                </div>
            }

            @if (_searchStarted)
            {
                <MudProgressCircular Color="Color.Success" Indeterminate="true" />
            }

            <MudTable Items="@cariler" FixedFooter="true" FixedHeader="true" Dense="true" Hover="true" Bordered="true" Striped="true">
                <ToolBarContent>
                    <MudText Typo="Typo.h6">Cari Listesi</MudText>

                </ToolBarContent>
                <HeaderContent>
                    <MudTh>#</MudTh>
                    <MudTh>Kodu</MudTh>
                    <MudTh>Adı</MudTh>
                    <MudTh>İlçe</MudTh>
                    <MudTh>İl</MudTh>

                </HeaderContent>
                <RowTemplate>
                    <MudTd>
                        <MudFab Color="Color.Primary" StartIcon="@Icons.Material.Filled.Add" Size="Size.Small" OnClick="(() => CariSec(context.Logref))" />
                    </MudTd>
                    <MudTd DataLabel="Kodu">@context.Kodu</MudTd>
                    <MudTd DataLabel="Adı">@context.Adi</MudTd>
                    <MudTd DataLabel="İlçe">@context.Ilce</MudTd>
                    <MudTd DataLabel="Şehir">@context.Il</MudTd>

                </RowTemplate>
                <PagerContent>
                    <MudTablePager RowsPerPageString="Sayfa başına kayıt sayısı" />
                </PagerContent>
            </MudTable>
        </div>
        @code
{
            [CascadingParameter] IModalService modal { get; set; }
            [CascadingParameter] BlazoredModalInstance ModalInstance { get; set; }
            [CascadingParameter] ModalParameters modalParameters { get; set; }

            [Parameter]
            public int? lgfirmano { get; set; }

            [Inject]
            NavigationManager navigation { get; set; }

            [Inject]
            HttpClient httpClient { get; set; }

            [Inject]
            ISnackbar Snackbar { get; set; }

            [Inject]
            ILocalStorageService LocalStorageService { get; set; }

            public List<VCariKartDto> cariler { get; set; }

            public VCariKartsRequestDto cari = new VCariKartsRequestDto();

            private string _searchString = "";
            private bool _sortNameByLength;
            private bool _searchStarted = false;


            public string ResultText { get; set; }
            public string ButonText = "Ara";

            private async Task LoadCariler()
            {
                cariler = await httpClient.GetServiceResponseAsync<List<VCariKartDto>>(UrlHelper.VCariKartListesi);
            }

            public async Task CariBul()
            {

                try
                {
                    if (string.IsNullOrEmpty(cari.SearchText))
                    {
                        throw new Exception(Utils.Mesajlar.MetinGir);
                    }

                    ButonText = "Aranıyor...";

                    _searchStarted = true;
                    ResultText = string.Empty;

                    var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
                    if (selectedFirmaDonem == null)
                        throw new Exception("Firma dönem seçilmedi");
                    cari.FirmaId = selectedFirmaDonem.firma_no.Value;
                    cari.lgfirmano = lgfirmano; // parametreden gelecek login olunan firmadan farklı olabilir.

                    cariler = await httpClient.PostGetServiceResponseAsync<List<VCariKartDto>, VCariKartsRequestDto>(UrlHelper.VCariKartAra, cari);

                    if (cariler.Count == 0)
                    {
                        ResultText = string.Format(@"'{0}' aradığınız cari bulunamadı", cari.SearchText);
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add(ex.Message, severity: Severity.Error);
                }
                finally
                {
                    _searchStarted = false;
                    ButonText = "Ara";
                }

            }

            public async Task CariSec(int logref)
            {
                try
                {
                    var selectedFirmaDonem = await LocalStorageService.GetItemAsync<SisFirmaDonemDto>(Consts.FirmaDonem);
                    if (selectedFirmaDonem == null)
                        throw new Exception("Firma dönem seçilmedi");

                    var cari = await httpClient.GetServiceResponseAsync<VCariKartDto>(UrlHelper.VCariKartGetir + "?logref=" + logref + "&firmaId=" + selectedFirmaDonem.firma_no.ToString());
                    if (cari != null)
                    {
                        modalParameters = new ModalParameters();
                        modalParameters.Add("secim", cari);
                        await ModalInstance.CloseAsync(ModalResult.Ok<VCariKartDto>(cari));
                    }
                }
                catch (Exception ex)
                {
                    Snackbar.Add(ex.Message, severity: Severity.Error);
                }
            }

        }

